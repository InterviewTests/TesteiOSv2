//
//  LoginSceneWorker.swift
//  TesteiOSv2
//
//  Created by Vlad Lopes on 14/02/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CPF_CNPJ_Validator

class LoginSceneWorker
{
    
    // MARK: Stored login treatment
    
    let userDefault = UserDefaults.standard
    
    func readStoredLogin() -> String
    {
        return userDefault.string(forKey: "TesteiOSv2") ?? ""
    }
    
    func storeLogin(login: String) {
        userDefault.setValue(login, forKey: "TesteiOSv2")
    }

    func clearLogin() {
        userDefault.removeObject(forKey: "TesteiOSv2")
    }
    
    // MARK: Login validate
    
    func validateLogin(user: String, password: String) -> String {
        var message = ""
        if user .isEmpty {
            message = LoginError.noUser.getErroLogin()
        } else if NSPredicate(format: "SELF MATCHES %@", "[0-9]+").evaluate(with: user) {
            if !BooleanValidator().validate(cpf: user) {
                message = LoginError.wrongCPF.getErroLogin()
            }
        } else {
            if !NSPredicate(format: "SELF MATCHES %@", "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}").evaluate(with: user) {
                    message = LoginError.wrongEmail.getErroLogin()
                }
            }
        if message != "" {
            return message
        }
            
        if password .isEmpty {
            message = LoginError.noPassword.getErroLogin()
        } else if !testPassword(passw: password) {
            message = LoginError.wrongPassword.getErroLogin()
        }

        return message

    }
    
    // MARK: Password validate
    
    func testPassword(passw: String) -> Bool {
        var upper = false
        var lower = false
        var special = false
        var normal = false
        
        for chr in passw {
            if chr .isUppercase {
                upper = true
                continue
            }
            if chr .isLowercase {
                lower = true
                continue
            }
            if chr .isLetter || chr .isNumber {
                normal = true
                continue
            }
            if String(chr).range(of: ".*[^A-Za-z0-9].*", options: .regularExpression) != nil {
                special = true
                continue
            }
        }
        
        if upper && lower && normal && special {
            return true
        } else {
            return false
        }
    }
}
