//
//  AccountSceneViewController.swift
//  TesteiOSv2
//
//  Created by Vlad Lopes on 14/02/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountSceneDisplayLogic: class
{
    func displayClient(viewModel: AccountScene.SetClient.ViewModel)
    func displayStatements(viewModel: AccountScene.Statements.ViewModel)
}

class AccountSceneViewController: UIViewController, AccountSceneDisplayLogic, UITableViewDataSource
{

    @IBOutlet weak var lblAccountNumber: UILabel!
    @IBOutlet weak var lblAccountBalance: UILabel!
    @IBOutlet weak var lblPeriodo: UILabel!

    @IBOutlet weak var lblUserName: UILabel!
    @IBOutlet weak var tableViewItens: UITableView!
    
    var statements: [AccountData] = []
    let client: Client! = nil
    
  var interactor: AccountSceneBusinessLogic?
  var router: (NSObjectProtocol & AccountSceneRoutingLogic & AccountSceneDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = AccountSceneInteractor()
    let presenter = AccountScenePresenter()
    let router = AccountSceneRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
    @IBAction func logoutTouched(_ sender: Any) {
        dismiss(animated: true, completion: nil)
    }
    
    // MARK: View lifecycle
  
   
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    formatClientData()
    requestStatements()
  }
    
    var didStatement = false

  // MARK: Prepare Table view
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return statements.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if didStatement {
            let cell = tableView.dequeueReusableCell(withIdentifier: "ItemCell", for: indexPath) as! ItemViewCell

            let statement = statements[indexPath.row]

            cell.lblTitle.text = statement.title
            cell.lblDate.text = statement.date
            cell.lblDescription.text = statement.description
            cell.lblValue.text = statement.value
            return cell
        } else {
            let cell = UITableViewCell()
            return cell
        }
    }
    
  // MARK: Get account data
  
    func formatClientData() {
        let request = AccountScene.SetClient.Request()
        interactor?.requestClientFormat(request: request)
    }
    
    func displayClient(viewModel: AccountScene.SetClient.ViewModel)
    {
        DispatchQueue.main.async {
            self.lblUserName.text = viewModel.name
            self.lblAccountNumber.text = viewModel.account
            self.lblAccountBalance.text = viewModel.balance
        }
    }
    
    // MARK: Get statements data
    
    func requestStatements() {
        let request = AccountScene.Statements.Request(id: 1)
        interactor?.requestStatements(request: request)
    }
    
    func displayStatements(viewModel: AccountScene.Statements.ViewModel) {
        DispatchQueue.main.async {
            self.statements = viewModel.statements
            self.tableViewItens.reloadData()
            
            if self.statements[0].title == "" && self.statements[0].date == "" &&
                self.statements[0].description == "" && self.statements[0].value == "" {
                self.didStatement = false
                self.lblPeriodo.text = "Cliente sem lan√ßamentos"
            } else {
                self.lblPeriodo.text = "Recentes"
                self.didStatement = true
            }
        }
    }
}
