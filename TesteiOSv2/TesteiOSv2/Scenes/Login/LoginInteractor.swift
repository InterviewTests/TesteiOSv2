//
//  LoginInteractor.swift
//  TesteiOSv2
//
//  Created by Gilson Gil on 15/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
  func getPersistedCredentials()
  func submitLogin(request: Login.SubmitLogin.Request)
}

protocol LoginDataStore {
  var userAccount: UserAccount? { get set }
}

final class LoginInteractor: LoginBusinessLogic, LoginDataStore {
  var presenter: LoginPresentationLogic?
  lazy var worker: LoginWorker? = LoginWorker()
  var userAccount: UserAccount?

  // MARK: Submit Login

  func submitLogin(request: Login.SubmitLogin.Request) {
    do {
      try worker?.validateUser(fields: request.fields)

      worker?.submitLogin(request: request) { response in
        if response.userAccount != nil {
          self.userAccount = response.userAccount
          self.presenter?.presentUserAccount(response: response)
        } else {
          self.presenter?.presentError(response: response)
        }
      }
    } catch {
      let response = Login.SubmitLogin.Response(userAccount: nil, error: error as? ErrorProtocol)
      presenter?.presentError(response: response)
    }
  }

  func getPersistedCredentials() {
    let credentials = worker?.getPersistedCredentials()
    let fields = Login.SubmitFields(user: credentials?.user, password: credentials?.password)
    let response = Login.PrefillCredentials.Response(fields: fields)
    presenter?.presentPersistedCredentials(response: response)
  }
}
