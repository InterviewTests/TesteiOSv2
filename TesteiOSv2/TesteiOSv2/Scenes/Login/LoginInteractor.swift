//
//  LoginInteractor.swift
//  TesteiOSv2
//
//  Created by jeffersoncsilva on 08/02/2019.
//  Copyright (c) 2019 Accenture. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
    func doLogin(request: Login.LoginModels.Request)
}

protocol LoginDataStore
{
    var userModel: UserModel { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    var userModel: UserModel = UserModel()
    
    // MARK: Do something
    
    func doLogin(request: Login.LoginModels.Request){
        
        do{
            
            let isValidForm = try self.validateForm(request: request)
            
            if isValidForm{
                
                if let user = request.user, let password = request.password{
                    
                    let parameters: Dictionary<String, Any> = ["user":user, "password": password]
                    
                    worker = LoginWorker()
                    worker?.doLogin(parameters: parameters, success: { (userModel) in
                        
                        let response = Login.LoginModels.Response(userModel: userModel)
                        
                        self.userModel = userModel
                        self.presenter?.presentHome(response: response)
                        
                    }, failure: { (error) in
                        print(error.description)
                    })
                }
            }
            
        }catch LoginError.incompleteForm{
            self.presenter?.presentLoginErrorAlert(error: .incompleteForm)
            
        }catch LoginError.invalidEmail{
            self.presenter?.presentLoginErrorAlert(error: .invalidEmail)
            
        }catch LoginError.invalidCPF{
            self.presenter?.presentLoginErrorAlert(error: .invalidCPF)
            
        }catch LoginError.invalidPassword{
            self.presenter?.presentLoginErrorAlert(error: .invalidPassword)
            
        }catch{
            self.presenter?.presentLoginErrorAlert(error: .unknwowError)
        }
        
    }
}

//MARK: - Validations
extension LoginInteractor{
    
    func validateForm(request: Login.LoginModels.Request) throws -> Bool{
        
        guard let user = request.user, let password = request.password else {
            throw LoginError.incompleteForm
        }
        
        if user == "" || password == ""{
            throw LoginError.incompleteForm
        }
        
        if !isValidEmail(email: user){
            throw LoginError.invalidEmail
            //            throw LoginError.invalidCPF
        }
        
        if !self.isValidPassword(password: password){
            throw LoginError.invalidPassword
        }
        
        return true
    }
    
    func isValidEmail(email:String) -> Bool{
        
        if email.count == 0{
            return false
        }
        let emailTest = NSPredicate(format:"SELF MATCHES %@", Regex.email.description)
        print("isValidEmail - \(emailTest.evaluate(with: email))")
        return emailTest.evaluate(with: email)
        
    }
    
    func isValidPassword(password:String) -> Bool {
        if password.count == 0{
            return false
        }
        let passwordTest = NSPredicate(format:"SELF MATCHES %@", Regex.password.description)
        print("isValidPassword - \(passwordTest.evaluate(with: password))")
        return passwordTest.evaluate(with: password)
    }
    
}
