//
//  LoginViewController.swift
//  TesteiOSv2
//
//  Created by Alex Nunes da Silva on 12/01/19.
//  Copyright (c) 2019 Alex Nunes da Silva. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import KeychainSwift

struct LoginKeys{
    static let userKey = "Yn5f`w)^"
    static let passWordKey = "Q%eNoe]"
    static let passWordRegx = "^(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9]).+$"
    static let emailRegx = "[a-zA-Z0-9][a-zA-Z0-9._-]{1,64}+@[a-zA-Z0-9-]{1,63}+\\.[a-zA-Z]{2,63}(?:\\.[a-zA-Z]{2,63})?"
    static let numberRegx = "^[0-9]*$"

}

struct Alerts {
    static let InvalidCPF = "CPF inválido."
    static let InvalidEmail = "E-mail inválido."
    static let InvalidUserORPass = "Usuário ou senha inválido."
}



protocol LoginDisplayLogic: class
{
  func displaySomething(viewModel: Login.LoginLoad.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{

  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
  let keychainLogin = KeychainSwift()

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor

  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
  }
  
  // MARK: Do Login
  
  @IBOutlet weak var loginTextField: UITextField!
    @IBOutlet weak var  passWordTextField: UITextField!
    @IBOutlet weak var loginButton: UIButton!

    @IBAction func loginTapped(_ sender: Any) {
        self.view.activityStartAnimating()
        doLogin()

    }
  
    func doLogin()
    {
        guard let login  = loginTextField.text else{return}
        guard let passWord = passWordTextField.text else{return}

        let isLogin    =  isCPFOREmail(cpfOrLogin: login)
        let validPassWord =  isPassWord(passWord: passWord)

        if isLogin && validPassWord{
            let request = Login.LoginLoad.Request.Login(login: login,senha: passWord)
            interactor?.doLogin(request: request)
        }else{
            self.openAlert(title: "Atenção!", message: Alerts.InvalidUserORPass)
            self.view.activityStopAnimating()

        }
    }

  func displaySomething(viewModel: Login.LoginLoad.ViewModel)
  {
    if viewModel.user.userAccount != nil{
        if let login = loginTextField.text, let passWord = passWordTextField.text{
            saveLogin(login: login, passWord: passWord)
        }
        self.view.activityStopAnimating()
        router?.routeLoginToShowStatements(segue: nil)
    }
  }
}


extension LoginViewController{

    func isCPFOREmail(cpfOrLogin : String) ->Bool{
        if cpfOrLogin.isValidRegex(regEx: LoginKeys.numberRegx){
            if cpfOrLogin.isValidCPF(){
                return true
            }else{
                self.openAlert(title: "Atenção!", message: Alerts.InvalidCPF)
                return false
            }
        }else{
            if cpfOrLogin.isValidRegex(regEx: LoginKeys.emailRegx){
                return true
            }else{
                self.openAlert(title: "Atenção!", message: Alerts.InvalidEmail)
                return false
            }
        }
    }

    func isPassWord(passWord : String) -> Bool{
        if passWord.isValidRegex(regEx: LoginKeys.passWordRegx){
            return true
        }else{
            return false
        }
    }

    func saveLogin(login : String, passWord : String){
        keychainLogin.clear()
        keychainLogin.set(login, forKey: LoginKeys.userKey)
        keychainLogin.set(passWord, forKey: LoginKeys.passWordKey)
    }
}
