//
//  LoginViewController.swift
//  TesteiOSv2
//
//  Created by Gilson Gil on 15/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginViewLogic: class {
  func didTapSubmitLogin(fields: Login.SubmitFields)
}

protocol LoginDisplayLogic: class {
  func displayError(viewModel: Login.SubmitLogin.ViewModel)
  func startLoading()
  func stopLoading()
}

final class LoginViewController: UIViewController, LoginDisplayLogic {
  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
  var loginView: LoginViewProperties?

  // MARK: Object lifecycle

  init() {
    super.init(nibName: nil, bundle: nil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  // MARK: View lifecycle

  override func loadView() {
    let view = LoginView(viewLogic: self)
    loginView = view
    self.view = view
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    if let fields = interactor?.getPersistedCredentials() {
      loginView?.userTextField.text = fields.user
      loginView?.passwordTextField.text = fields.password
    }
  }

  // MARK: Submit Response

  func displayError(viewModel: Login.SubmitLogin.ViewModel) {
    let alert = UIAlertController(title: viewModel.errorMessage, message: nil, preferredStyle: .alert)
    let okAction = UIAlertAction(title: String.Shared.close, style: .default) { [weak self] _ in
      if viewModel.activateUserTextField {
        self?.loginView?.userTextField.becomeFirstResponder()
      } else if viewModel.activatePasswordTextField {
        self?.loginView?.passwordTextField.becomeFirstResponder()
      }
    }
    alert.addAction(okAction)
    present(alert, animated: true, completion: nil)
  }

  func startLoading() {
    view.isUserInteractionEnabled = false
    loginView?.button.startLoading()
  }

  func stopLoading() {
    view.isUserInteractionEnabled = true
    loginView?.button.stopLoading()
  }
}

// MARK: - Login View Logic

extension LoginViewController: LoginViewLogic {
  func didTapSubmitLogin(fields: Login.SubmitFields) {
    let request = Login.SubmitLogin.Request(fields: fields)
    interactor?.submitLogin(request: request)
    startLoading()
  }
}
