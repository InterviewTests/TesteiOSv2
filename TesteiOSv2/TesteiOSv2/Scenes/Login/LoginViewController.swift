//
//  LoginViewController.swift
//  TesteiOSv2
//
//  Created by jeffersoncsilva on 08/02/2019.
//  Copyright (c) 2019 Accenture. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func displayStatement(viewModel: Login.LoginModels.ViewModel)
    func displayLoading()
    func removeLoading()
    func displayAlert(title: String, message: String, titleFirstButton: String)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    var userModel: UserModel?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View Lifecycle
    override func viewDidLoad(){
        super.viewDidLoad()
        self.setUpUI()
    }
    
    // MARK: - IBOutlets
    @IBOutlet weak var text_field_user: UITextField!
    @IBOutlet weak var text_field_password: UITextField!
    @IBOutlet weak var button_login: UIButton!
    @IBOutlet weak var image_view_logo: UIImageView!
    
    // MARK: - IBActions
    @IBAction func didTouchLoginButton(_ sender: Any) {
        print("didTouchLoginButton")
        self.doLogin()
    }
    
    // MARK: - Functions
    func setUpUI(){
        self.setUpTextFields()
        self.setUpTextButton()
    }
    
    func setUpTextFields(){
        self.text_field_user.addLeftPadding()
        self.text_field_user.addBorder(color: .TextFieldBorderColor)
        self.text_field_user.keyboardType = .default
        
        self.text_field_password.addLeftPadding()
        self.text_field_password.addBorder(color: .TextFieldBorderColor)
        self.text_field_password.isSecureTextEntry = true
    }
    
    func setUpTextButton(){
        self.button_login.addBorder(color: .ButtonBackgroundColor)
    }
    
    func doLogin()
    {
        if let user = self.text_field_user.text, let password = self.text_field_password.text{
            self.text_field_user.text = ""
            self.text_field_password.text = ""
            let request = Login.LoginModels.Request(user:user,password:password)
            interactor?.doLogin(request: request)
        }
    }
    
    func displayStatement(viewModel: Login.LoginModels.ViewModel)
    {
        router?.routeToStatement(segue: nil)
    }
    
    func displayAlert(title: String, message: String, titleFirstButton: String){
        self.showAlert(title: title, message: message, titleFirstButton: titleFirstButton)
    }
    
    func displayLoading() {
        self.showLoading()
    }
    
    func removeLoading() {
        self.hideLoading()
    }
    
    func displayCpf(cpf: String) {
        self.text_field_user.text = cpf
    }
    
}
