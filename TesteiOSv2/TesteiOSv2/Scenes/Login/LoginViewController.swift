//
//  LoginViewController.swift
//  TesteiOSv2
//
//  Created by jeffersoncsilva on 08/02/2019.
//  Copyright (c) 2019 Accenture. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

//MARK: - Protocols
protocol LoginDisplayLogic: class{
    func displayStatement(viewModel: Login.LoginModels.ViewModel)
    func displayLoading()
    func removeLoading()
    func displayAlert(title: String, message: String, titleFirstButton: String)
    func displayCredentials(credentials: Dictionary<String, Any>)
}

//MARK: - Class body
class LoginViewController: UIViewController{

    //MARK: - Properties
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    var userModel: UserModel?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup(){
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View Lifecycle
    override func viewDidLoad(){
        super.viewDidLoad()
        self.setUpUI()
        self.interactor?.getCredentials()
    }
    
    // MARK: - IBOutlets
    @IBOutlet weak var text_field_user: UITextField!
    @IBOutlet weak var text_field_password: UITextField!
    @IBOutlet weak var button_login: UIButton!
    @IBOutlet weak var image_view_logo: UIImageView!
    
    // MARK: - IBActions
    @IBAction func didTouchLoginButton(_ sender: Any) {
        self.doLogin()
    }
    
    // MARK: - Functions
    func setUpUI(){
        self.setUpTextFields()
        self.setUpTextButton()
        self.setUpGestures()
    }
    
    func setUpTextFields(){
        self.text_field_user.addLeftPadding()
        self.text_field_user.addBorder(color: .TextFieldBorderColor)
        self.text_field_user.keyboardType = .default
        self.text_field_user.delegate = self
        
        self.text_field_password.addLeftPadding()
        self.text_field_password.addBorder(color: .TextFieldBorderColor)
        self.text_field_password.isSecureTextEntry = true
        self.text_field_password.delegate = self
    }
    
    func setUpTextButton(){
        self.button_login.addBorder(color: .ButtonBackgroundColor)
    }
    
    func clearFields(){
        self.text_field_user.text = ""
        self.text_field_password.text = ""
    }
    
    func doLogin(){
        if let user = self.text_field_user.text, let password = self.text_field_password.text{
            let request = Login.LoginModels.Request(user:user,password:password)
            interactor?.doLogin(request: request)
        }
    }
    
    func setUpGestures(){
        let viewTapGesture: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(self.tapView))
        view.addGestureRecognizer(viewTapGesture)
    }
    
    @objc func tapView(){
        self.view.endEditing(true)
    }

    
}

extension LoginViewController: LoginDisplayLogic{
    
    func displayStatement(viewModel: Login.LoginModels.ViewModel){
        router?.routeToStatement(segue: nil)
        self.clearFields()
    }
    
    func displayAlert(title: String, message: String, titleFirstButton: String){
        self.showAlert(title: title, message: message, titleFirstButton: titleFirstButton)
    }
    
    func displayLoading() {
        self.showLoading()
    }
    
    func removeLoading() {
        self.hideLoading()
    }
    
    func displayCredentials(credentials: Dictionary<String, Any>) {
        if let user = credentials["user"] as? String{
            self.text_field_user.text = user
        }
        
        if let password = credentials["password"] as? String{
            self.text_field_password.text = password
        }
        
    }
}

extension LoginViewController: UITextFieldDelegate{
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        
        if textField == self.text_field_user{
            self.text_field_password.becomeFirstResponder()
        }else{
            self.doLogin()
        }
        return true
    }
}
