//
//  StatementViewController.swift
//  TesteiOSv2
//
//  Created by jeffersoncsilva on 08/02/2019.
//  Copyright (c) 2019 Accenture. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

//MARK: - Protocols
protocol StatementDisplayLogic: class{
    func displayLoading()
    func removeLoading()
    func displayStatementList(viewModel: Statement.StatementModels.ViewModel)
}

//MARK: - Class body
class StatementViewController: UIViewController, StatementDisplayLogic{
    
    //MARK: - Properties
    var interactor: StatementBusinessLogic?
    var router: (NSObjectProtocol & StatementRoutingLogic & StatementDataPassing)?
    var statementList: [StatementItem]?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup(){
        let viewController = self
        let interactor = StatementInteractor()
        let presenter = StatementPresenter()
        let router = StatementRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?){
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad(){
        super.viewDidLoad()
        self.setUpUI()
        self.getStatements()
    }
    //MARK: - @IBOutlets
    @IBOutlet weak var table_view_statements: UITableView!
    @IBOutlet weak var view_user_informations: StatementTableHeader!
    
    //MARK: - Functions
    func displayLoading() {
        self.showLoading()
    }
    
    func removeLoading() {
        self.hideLoading()
    }
    
    func setUpUI(){
        self.modalTransitionStyle = .crossDissolve
        self.modalPresentationStyle = .currentContext
        self.table_view_statements.tableFooterView = UIView()
        self.table_view_statements.tableHeaderView = UIView()
        self.table_view_statements.dataSource = self
        self.table_view_statements.delegate = self
        self.table_view_statements.separatorStyle = .none
        self.automaticallyAdjustsScrollViewInsets = false
        let statementTableViewCell = UINib(nibName: "StatementTableViewCell", bundle: nil)
        self.table_view_statements.register(statementTableViewCell, forCellReuseIdentifier: "cell")
        self.view_user_informations.delagete = self
        if let user = router?.dataStore?.userModel.user{
            self.view_user_informations.populateFields(user: user)
        }
    }
    
    func dismiss(){
        self.dismiss(animated: true, completion: nil)
    }
    
    func getStatements(){
        let request = Statement.StatementModels.Request()
        interactor?.getStatements(request: request)
    }
    
    func displayStatementList(viewModel: Statement.StatementModels.ViewModel){
        self.statementList = viewModel.statementModel.statementList
        self.table_view_statements.reloadData()
    }
}

extension StatementViewController: UITableViewDelegate{
    
}

extension StatementViewController: UITableViewDataSource{
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let statementList = self.statementList else {
            return 0
        }
        return statementList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let identifier = "cell"
        let statementTableViewCell = tableView.dequeueReusableCell(withIdentifier: identifier) as! StatementTableViewCell
        if let statementList = self.statementList{
            statementTableViewCell.populateFields(statement: statementList[indexPath.row])
        }
        return statementTableViewCell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 95
    }
    
}

extension StatementViewController: StatementTableHeaderProtocol{
    
    func didLogOut() {
        self.interactor?.clearCredentials()
        self.dismiss()
    }
    
}
