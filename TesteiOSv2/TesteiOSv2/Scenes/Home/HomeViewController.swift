//
//  HomeViewController.swift
//  TesteiOSv2
//
//  Created by jeffersoncsilva on 08/02/2019.
//  Copyright (c) 2019 Accenture. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class
{
    func displaySomething(viewModel: Home.Something.ViewModel)
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.setUpUI()
        doSomething()
    }
    
    // MARK: Do something
    
    
    @IBOutlet weak var table_view_statements: UITableView!
    
    func setUpUI(){
        self.table_view_statements.contentInset = UIEdgeInsets(top: -20,left: 0,bottom: 0,right: 0);
        self.modalTransitionStyle = .crossDissolve
        self.modalPresentationStyle = .currentContext
        self.table_view_statements.tableFooterView = UIView()
        self.table_view_statements.delegate = self
        self.table_view_statements.dataSource = self
        self.table_view_statements.separatorStyle = .none
        self.automaticallyAdjustsScrollViewInsets = false
        let homeTableViewCell = UINib(nibName: "HomeTableViewCell", bundle: nil)
        self.table_view_statements.register(homeTableViewCell, forCellReuseIdentifier: "cell")
    }
    
    func dismiss(){
        self.dismiss(animated: true, completion: nil)
    }
    
    func doSomething()
    {
        let request = Home.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Home.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}


extension HomeViewController: UITableViewDelegate{
    
}

extension HomeViewController: UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 50
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let identifier = "cell"
        let homeTableViewCell = tableView.dequeueReusableCell(withIdentifier: identifier) as! HomeTableViewCell
        homeTableViewCell.setUpCell()
        return homeTableViewCell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 112
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        if let nib = Bundle.main.loadNibNamed("HomeTableHeader", owner: self, options: nil){
            if let homeTableHeader = nib[0] as? HomeTableHeader{
                homeTableHeader.delagete = self
                self.table_view_statements.tableHeaderView?.frame = homeTableHeader.frame
                return homeTableHeader
            }
        }
        
        return nil
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        if let nib = Bundle.main.loadNibNamed("HomeTableHeader", owner: self, options: nil){
            if let homeTableHeader = nib[0] as? HomeTableHeader{
                return homeTableHeader.frame.size.height
            }
        }
        
        return 0.0
    }
    
}

extension HomeViewController: HomeTableHeaderProtocol{
    
    func didLogOut() {
        self.dismiss()
    }
    
}
