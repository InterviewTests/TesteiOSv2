//
//  AccountViewController.swift
//  TesteiOSv2
//
//  Created by Gilson Gil on 16/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountViewLogic: class {
  func didTapLogout()
}

protocol AccountDisplayLogic: class {
  func displayAccountDetails(viewModel: Account.ShowAccountDetails.ViewModel)
  func displayStatements(viewModel: Account.FetchStatements.ViewModel)
}

final class AccountViewController: UIViewController {
  var interactor: AccountBusinessLogic?
  var router: (NSObjectProtocol & AccountRoutingLogic & AccountDataPassing)?
  var accountView: AccountView?
  var dataStore: AccountDataStore?

  // MARK: Object lifecycle

  init() {
    super.init(nibName: nil, bundle: nil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = AccountInteractor()
    let presenter = AccountPresenter()
    let router = AccountRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
    dataStore = interactor
  }

  override var preferredStatusBarStyle: UIStatusBarStyle {
    return .lightContent
  }

  // MARK: View lifecycle

  override func loadView() {
    let accountView = AccountView(viewLogic: self)
    self.accountView = accountView
    view = accountView
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    showAccountDetails()
    fetchStatements()
    configureTableView()
  }

  override func viewDidAppear(_ animated: Bool) {
    super.viewDidAppear(animated)
    view.layoutIfNeeded()
  }

  // MARK: Show Account Details

  func showAccountDetails() {
    let request = Account.ShowAccountDetails.Request()
    interactor?.showAccountDetails(request: request)
  }

  // MARK: Fetch Statements

  func fetchStatements() {
    let request = Account.FetchStatements.Request()
    interactor?.fetchStatements(request: request)
  }

  // MARK: Configure Table View

  func configureTableView() {
    accountView?.tableView.register(StatementCell.self,
                                    forCellReuseIdentifier: StatementCell.reuseIdentifier)
    accountView?.tableView.dataSource = self
  }
}

// MARK: - Account Display Logic

extension AccountViewController: AccountDisplayLogic {
  func displayAccountDetails(viewModel: Account.ShowAccountDetails.ViewModel) {
    accountView?.nameLabel.text = viewModel.accountDetails.name
    accountView?.accountValueLabel.text = viewModel.accountDetails.account
    accountView?.balanceValueLabel.text = viewModel.accountDetails.balance
  }

  func displayStatements(viewModel: Account.FetchStatements.ViewModel) {
    dataStore?.displayedStatements = viewModel.displayedStatements
    DispatchQueue.main.async {
      self.accountView?.tableView.reloadData()
    }
  }
}

// MARK: - Account View Logic

extension AccountViewController: AccountViewLogic {
  func didTapLogout() {
    router?.routeToLogin()
  }
}

// MARK: - UITableView DataSource
extension AccountViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return dataStore?.displayedStatements?.count ?? 0
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: StatementCell.reuseIdentifier, for: indexPath)
    if let displayedStatement = dataStore?.displayedStatements?[indexPath.row],
      let statementCell = cell as? StatementCellDisplayLogic {
      statementCell.update(with: displayedStatement)
    }
    return cell
  }
}
