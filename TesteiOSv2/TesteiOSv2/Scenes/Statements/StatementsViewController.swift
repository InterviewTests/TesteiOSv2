//
//  StatementsViewController.swift
//  TesteiOSv2
//
//  Created by Silva, Alex Nunes da on 14/01/2019.
//  Copyright (c) 2019 Alex Nunes da Silva. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//


import UIKit
import KeychainSwift


protocol StatementsDisplayLogic: class
{
    func displaySomething(viewModel: Statements.StatementsApi.ViewModel, userAccount : UserAcount)
}

class StatementsViewController: UIViewController, StatementsDisplayLogic
{
    var statementsView: StatementsView?
    var interactor: StatementsBusinessLogic?
    var router: (NSObjectProtocol & StatementsRoutingLogic & StatementsDataPassing)?
    var listStatements : StatementModel?
    var userAccount : UserAcount?
    let keychainLogin = KeychainSwift()


  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()

  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = StatementsInteractor()
    let presenter = StatementsPresenter()
    let router = StatementsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor

  }

    func setUpHeaderView(){
    }

  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

    override func awakeFromNib() {
        super.awakeFromNib()
    }

    fileprivate func dismissButtonTapped() {
        self.statementsView?.logoffButtonTapped = {sender in
            self.dismiss(animated: true, completion: {
                //..
            })
        }
    }

  
  // MARK: View lifecycle

    @IBOutlet weak var listStatementstableview: UITableView!

  override func viewDidLoad()
  {
    super.viewDidLoad()
    self.setUpLayout()
    isValidLastUser()

  }

    func setUpLayout(){
        self.statementsView =  Bundle.main.loadNibNamed("StatementsView", owner: self, options: nil)![0] as! StatementsView
        self.view.addSubview(statementsView ?? StatementsView())
        dismissButtonTapped()

    }

  // MARK: Do something

    func isValidLastUser() {
        if let userAccount = getUserAccount(){
            if let userId = userAccount.userId{
                print(userId)
                doStatement(param: "\(userId)")
            }
        }
    }
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    func doStatement(param : String)
  {
    let request = Statements.StatementsApi.Request(param: param)
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Statements.StatementsApi.ViewModel,userAccount : UserAcount)
  {
    
      self.statementsView?.setUser(userAccount: userAccount)
      listStatements = viewModel.statement
      listStatementstableview.reloadData()
  }
}


extension StatementsViewController : UITableViewDelegate{

}

extension StatementsViewController : UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listStatements?.statementList?.count ?? 0
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "StatementsCell") as! StatementsCell
        if let listStatements = listStatements?.statementList?[indexPath.row]{
            cell.setUpStatements(statements: listStatements)
            cell.selectionStyle = .none
        }
        return cell
    }

}


extension StatementsViewController{
    func getUserAccount() -> UserAcount?{
        do{
            // Decode
            if let dataDecode = keychainLogin.getData(LoginKeys.userKey){
                let jsonDecoder = JSONDecoder()
                let userAccount = try jsonDecoder.decode(UserAcount.self, from: dataDecode)
                return userAccount
            }
        }catch{
            print(error.localizedDescription)
        }

        return nil
    }
}

extension UIView {
    class func fromNib() -> UIView {
        return Bundle.main.loadNibNamed("StatementsView", owner: nil, options: nil)![0] as! UIView
    }
}
