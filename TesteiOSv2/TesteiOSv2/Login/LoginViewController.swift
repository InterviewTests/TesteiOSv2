//
//  LoginViewController.swift
//  TesteiOSv2
//
//  Created by Mônica Marques on 10/03/20.
//  Copyright (c) 2020 Mônica Marques. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JGProgressHUD

protocol LoginDisplayLogic: class {
    func showAlertErrorMessage(message: String)
    func showLoadingView()
    func hideLoadingView()
    func showHome(with user: User)
}

class LoginViewController: UIViewController, LoginDisplayLogic {
    
    
    // MARK: - Variables
    
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    let loadingView = JGProgressHUD(style: .dark)
    
    // MARK: - IBOutlets
    
    @IBOutlet weak var userTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    // MARK: - Setup
    
    private func setup() {
        
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
//        router.dataStore = interactor
    }
    
    // MARK: - Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        
        super.viewDidLoad()
        self.userTextField.delegate = self
        self.passwordTextField.delegate = self
        self.setupObservers()
        self.setupLoadingView()
    }
    
    // MARK: - Private Methods
    
    private func setupLoadingView() {
        self.loadingView.textLabel.text = "Carregando..."
    }
    
    private func setupObservers() {
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    @objc private func keyboardWillShow(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
            if self.view.frame.origin.y == 0 {
                self.view.frame.origin.y -= keyboardSize.height - 100
            }
        }
    }

    @objc private func keyboardWillHide(notification: NSNotification) {
        if self.view.frame.origin.y != 0 {
            self.view.frame.origin.y = 0
        }
    }
    
    // MARK: - Protocol LoginDisplayLogic
    
    func showAlertErrorMessage(message: String) {
        let alert = UIAlertController(title: "Erro", message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
    func showLoadingView() {
        self.loadingView.show(in: self.view)
    }
    
    func hideLoadingView() {
        self.loadingView.dismiss()
    }
    
    func showHome(with user: User) {
        self.router?.showHome(with: user)
    }
    
    //MARK: - IBAction
    
    @IBAction func didTouchLoginButton(_ sender: UIButton) {
        guard let interactor = self.interactor,
              let user = self.userTextField.text,
              let password = self.passwordTextField.text else {return}
        
        if !interactor.validateUser(user) {
            return
        }
        
        if !interactor.validatePassword(password) {
            return
        }
        
        let request = Login.Request(user: user,
                                    password: password)
        self.interactor?.tryLogin(request)
    }
}

//MARK: - UITextFieldDelegate

extension LoginViewController: UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField.isEqual(self.userTextField) {
            self.passwordTextField.becomeFirstResponder()
        } else {
           self.view.endEditing(true)
        }
        return true
    }
}
