//
//  LoginWorkerTests.swift
//  TesteiOSv2
//
//  Created by Gilson Gil on 17/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2

import Quick
import Nimble

final class LoginWorkerSpec: QuickSpec {
  // MARK: Subject under test
  override func spec() {
    let sut = LoginWorker()
    let validEmail = "gilson.gil@me.com"
    let validCPF = "11122233390"
    let validPassword = "qQ1!"
    let invalidEmail = "gilson.gil@me"
    let invalidCPF = "21367182312312"
    let invalidPassword = "qweqw"

    describe("given a login worker") {
      context("with valid user and password fields") {
        it("should validate user and password fields") {
          let fields = Login.SubmitFields(user: validEmail, password: validPassword)
          expect { try sut.validateCredentials(fields: fields) }.toNot(throwError())

          let fieldsCpf = Login.SubmitFields(user: validCPF, password: validPassword)
          expect { try sut.validateCredentials(fields: fieldsCpf) }.toNot(throwError())
        }
      }

      context("with invalid user and valid password") {
        it("should not validate credentials") {
          let fields = Login.SubmitFields(user: invalidEmail, password: validPassword)
          expect { try sut.validateCredentials(fields: fields) }.to(throwError(LoginError.invalidUser))

          let fieldsCpf = Login.SubmitFields(user: invalidCPF, password: validPassword)
          expect { try sut.validateCredentials(fields: fieldsCpf) }.to(throwError(LoginError.invalidUser))
        }
      }

      context("with valid user and invalid password") {
        it("should not validate credentials") {
          let fields = Login.SubmitFields(user: validEmail, password: invalidPassword)
          expect { try sut.validateCredentials(fields: fields) }.to(throwError(LoginError.invalidPassword))
        }
      }

      context("with empty user and valid password") {
        it("should not validate credentials") {
          let fields = Login.SubmitFields(user: "", password: validPassword)
          expect { try sut.validateCredentials(fields: fields) }.to(throwError(LoginError.emptyUser))
        }
      }

      context("with valid user and empty password") {
        it("should not validate credentials") {
          let fields = Login.SubmitFields(user: validEmail, password: "")
          expect { try sut.validateCredentials(fields: fields) }.to(throwError(LoginError.emptyPassword))

          let fieldsCPF = Login.SubmitFields(user: validCPF, password: "")
          expect { try sut.validateCredentials(fields: fieldsCPF) }.to(throwError(LoginError.emptyPassword))
        }
      }

      context("with empty user and invalid password") {
        it("should not validate credentials") {
          let fields = Login.SubmitFields(user: "", password: invalidPassword)
          expect { try sut.validateCredentials(fields: fields) }.to(throwError(LoginError.emptyUser))
        }
      }

      context("with invalid user and empty password") {
        it("should not validate credentials") {
          let fields = Login.SubmitFields(user: invalidEmail, password: "")
          expect { try sut.validateCredentials(fields: fields) }.to(throwError(LoginError.emptyPassword))

          let fieldsCPF = Login.SubmitFields(user: invalidCPF, password: "")
          expect { try sut.validateCredentials(fields: fieldsCPF) }.to(throwError(LoginError.emptyPassword))
        }
      }

      context("with empty user and empty password") {
        it("should not validate credentials") {
          let fields = Login.SubmitFields(user: "", password: "")
          expect { try sut.validateCredentials(fields: fields) }.to(throwError(LoginError.emptyUser))
        }
      }

      context("a valid credentials login") {
        it("should persist credentials to keychain") {
          let fields = Login.SubmitFields(user: validEmail, password: validPassword)
          let request = Login.SubmitLogin.Request(fields: fields)
          sut.submitLogin(request: request) { _ in
            let persistedCredentials = sut.getPersistedCredentials()
            expect(persistedCredentials?.user).to(equal(fields.user))
            expect(persistedCredentials?.password).to(equal(fields.password))
          }
        }
      }

      context("persist new credentials and retrieve") {
        let fields = Login.SubmitFields(user: validEmail, password: validPassword)
        sut.persistCredentials(fields: fields)
        let persisted = sut.getPersistedCredentials()

        expect(persisted?.user).to(equal(fields.user))
        expect(persisted?.password).to(equal(fields.password))

        let password2 = validPassword + validPassword
        let fields2 = Login.SubmitFields(user: validCPF, password: password2)
        sut.persistCredentials(fields: fields2)
        let persisted2 = sut.getPersistedCredentials()

        expect(persisted2?.user).to(equal(fields2.user))
        expect(persisted2?.password).to(equal(fields2.password))
      }
    }
  }
}
