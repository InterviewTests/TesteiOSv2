//
//  LoginViewControllerTests.swift
//  TesteiOSv2
//
//  Created by Gilson Gil on 17/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2

import Quick
import Nimble

final class LoginViewControllerSpec: QuickSpec {
  // MARK: Subject under test
  override func spec() {
    var sut = LoginViewController()
    let window = UIWindow()
    window.rootViewController = sut
    window.makeKeyAndVisible()

    let user = "gil@gil.com"
    let password = "qQ1!"

    describe("given a login view controller") {
      beforeEach {
        sut = LoginViewController()
        window.rootViewController = sut
      }

      context("and is successfully loaded") {
        it("should pre-fill fields with persisted user") {
          let viewModel = Login.PrefillCredentials.ViewModel(user: user, password: password)
          sut.displayPersistedCredentials(viewModel: viewModel)
          expect(sut.loginView?.userTextField.text).toEventually(equal(user))
          expect(sut.loginView?.passwordTextField.text).toEventually(equal(password))
        }
      }

      context("and a user tap submit button") {
        it("submit button should start loading") {
          let fields = Login.SubmitFields(user: user, password: password)

          sut.didTapSubmitLogin(fields: fields)

          expect(sut.loginView!.button.isLoading).to(equal(true))
        }

        it("and should eventually stop loading") {
          let user = "gil@gil.com"
          let password = "qQ1!"

          let fields = Login.SubmitFields(user: user, password: password)

          sut.didTapSubmitLogin(fields: fields)

          expect(sut.loginView!.button.isLoading)
            .toEventually(equal(false), timeout: 60, pollInterval: 1, description: "")
        }

        context("and a user tap submit button with valid credentials") {
          it("should route to a logged in view controller") {
            let fields = Login.SubmitFields(user: user, password: password)

            expect(window.rootViewController).to(equal(sut))

            sut.didTapSubmitLogin(fields: fields)

            expect(window.rootViewController)
              .toNotEventually(equal(sut), timeout: 10, pollInterval: 1, description: nil)
          }
        }

        context("and a user tap submit button with invalid credentials") {
          it("should present an alert view controller") {
            let invalidUser = "gil"
            let invalidPassword = "qqq"
            let fields = Login.SubmitFields(user: invalidUser, password: invalidPassword)

            expect(window.rootViewController).to(equal(sut))

            sut.didTapSubmitLogin(fields: fields)

            expect(sut.presentedViewController).toEventually(beAnInstanceOf(UIAlertController.self))
          }
        }
      }
    }
  }
}
