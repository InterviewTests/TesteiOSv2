//
//  AccountPresenterTests.swift
//  TesteiOSv2
//
//  Created by Gilson Gil on 18/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2

import Quick
import Nimble

final class AccountPresenterSpec: QuickSpec {
  // MARK: Subject under test
  override func spec() {
    let sut = AccountPresenter()
    let viewController = AccountViewController()
    let window = UIWindow()
    window.rootViewController = viewController
    window.makeKeyAndVisible()
    sut.viewController = viewController

    describe("given a account presenter") {
      context("presents account details") {
        it("the viewcontroller should display account info") {
          let userId = 1
          let name = "Gilson Gil"
          let account = "0250"
          let agency = "0911"
          let balance = 650.90
          let accountString = "\(account) / \(agency)"
          let balanceString = String(format: "R$%.2f", arguments: [balance])
          let userAccount = UserAccount(userId: userId, name: name, bankAccount: account, agency: agency, balance: balance)
          let response = Account.ShowAccountDetails.Response(userAccount: userAccount)
          sut.presentAccountDetails(response: response)
          expect(viewController.accountView?.nameLabel.text).toEventually(equal(name))
          expect(viewController.accountView?.accountValueLabel.text).toEventually(equal(accountString))
          expect(viewController.accountView?.balanceValueLabel.text).toEventually(equal(balanceString))
        }
      }

      context("presents statements") {
        it("the viewcontroller should present a list of all statements") {
          let statements = [
            Statement(title: "Title", description: "Description", date: Date(), value: 0),
            Statement(title: "Title2", description: "Description2", date: Date(), value: 0),
            Statement(title: "Title3", description: "Description3", date: Date(), value: 0),
            Statement(title: "Title4", description: "Description4", date: Date(), value: 0)
          ]
          let response = Account.FetchStatements.Response(statements: statements)
          sut.presentStatements(response: response)
          expect(viewController.accountView?.tableView.numberOfRows(inSection: 0)).toEventually(equal(statements.count))
        }
      }
    }
  }
}
