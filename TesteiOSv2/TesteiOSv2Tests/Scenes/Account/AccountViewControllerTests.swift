//
//  AccountViewControllerTests.swift
//  TesteiOSv2
//
//  Created by Gilson Gil on 18/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2

import Quick
import Nimble

final class AccountViewControllerSpec: QuickSpec {
  // MARK: Subject under test
  override func spec() {
    var sut = AccountViewController()
    let window = UIWindow()
    window.rootViewController = sut
    window.makeKeyAndVisible()

    describe("given a account view controller") {
      beforeEach {
        sut = AccountViewController()
        window.rootViewController = sut
      }

      context("and is successfully loaded") {
        it("should display account details") {
          let name = "Gilson"
          let account = "2050"
          let balance = "R$ 700,00"
          let accountDetails = Account.AccountDetails(name: name, account: account, balance: balance)
          let viewModel = Account.ShowAccountDetails.ViewModel(accountDetails: accountDetails)
          sut.displayAccountDetails(viewModel: viewModel)
          expect(sut.accountView?.nameLabel.text).toEventually(equal(name))
          expect(sut.accountView?.accountValueLabel.text).toEventually(equal(account))
          expect(sut.accountView?.balanceValueLabel.text).toEventually(equal(balance))
        }

        it("should display statements list") {
          let displayedStatements = [
            Account.FetchStatements.ViewModel.DisplayedStatement(title: "TED Recebida", description: "Salário", date: "25/02/2019", value: "R$100,00"),
            Account.FetchStatements.ViewModel.DisplayedStatement(title: "Pagamento", description: "Cartão de crédito", date: "29/02/2019", value: "-R$500,00"),
            Account.FetchStatements.ViewModel.DisplayedStatement(title: "Pagamento", description: "Jantar", date: "01/03/2019", value: "-R$200,00")
          ]
          let viewModel = Account.FetchStatements.ViewModel(displayedStatements: displayedStatements)
          sut.displayStatements(viewModel: viewModel)
          expect(sut.accountView?.tableView.numberOfRows(inSection: 0)).toEventually(equal(displayedStatements.count))
        }
      }
    }
  }
}
