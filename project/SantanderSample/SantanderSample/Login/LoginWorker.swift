//
//  LoginWorker.swift
//  SantanderSample
//
//  Created by Virgilius Santos on 26/10/18.
//  Copyright (c) 2018 Virgilius Santos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class LoginWorker {
    
    var serviceManager: ServiceManager!
    
    let patternCPF
        = "([0-9]{2}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[\\/]?[0-9]{4}[-]?[0-9]{2})|([0-9]{3}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[-]?[0-9]{2})"
    
    let patternEmail
        = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}"
    
    let patternPassword
        = "^(?=.*[A-Z])(?=.*[!@#$&*])(((?=.*[0-9])|(?=.*[\\w]))).{3,}$"
    
    func login(_ request: Login.Request, completion: @escaping(Result<Login.Response, Error>)->()) {
        serviceManager.login(request) { result in
            switch result {
            case .error(let error):
                completion(.error(error))
            case .success(let response):
                if response.success {
                    self.saveLogin(request)
                    completion(.success(response))
                } else {
                    completion(.error(APIError.loginFail))
                }
            }
        }
    }
    
    func saveLogin(_ request: Login.Request) {
        let user = request.user
        let password = request.password
        let _ = KeychainManager.save(user!, type: .user)
        let _ = KeychainManager.save(password!, type: .password)
    }
    
    func getLastLogin() -> Login.LoginSave {
        var response = Login.LoginSave()
        response.user = KeychainManager.get(type: .user)
        response.password = KeychainManager.get(type: .password)
        return response
    }
    
    func validateId(_ string: String?) -> Bool {
        guard let word = string, word.count >= 3 else {
            return false
        }
        
        return (match(word, patternCPF) || match(word, patternEmail) )
    }
    
    func validatePassword(_ string: String?) -> Bool {
        guard let word = string, word.count >= 3 else {
            return false
        }
        
        return match(word, patternPassword)
    }
    
    private func match(_ word: String, _ pattern: String) -> Bool {
        let mutable = NSMutableString(string: word)
        let range: NSRange = NSRange(location: 0, length: word.count)
        do {
            let regex = try NSRegularExpression(pattern: pattern)
            regex.replaceMatches(in: mutable, range: range, withTemplate: "")
        } catch {
            return false
        }
        return String(mutable).isEmpty
    }
}
