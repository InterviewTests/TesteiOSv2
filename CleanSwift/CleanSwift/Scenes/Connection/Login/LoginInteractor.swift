//
//  LoginInteractor.swift
//  CleanSwift
//
//  Created by Samanta Clara Coutinho Rondon do Nascimento on 2019-08-01.
//  Copyright (c) 2019 Sam. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
    func getLastUser()
    func doSomething(request: Login.Request)
}

protocol LoginDataStore {
    var user: UserRealm? { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    var presenter: LoginPresentationLogic?
    var worker: LoginWorkerProtocol?
    var user: UserRealm?
    private lazy var realmWorker: RealmWorker = {
        let manager = RealmWorker()
        return manager
    }()
  
     init(worker: LoginWorkerProtocol = LoginWorker.shared) {
        self.worker = worker
    }
    
    func getLastUser() {
        guard let user = realmWorker.getObj() else {
            return
        }
        self.user = user
        presenter?.presentLastUser(user: user)
    }
    
  // MARK: Do something
  
    func doSomething(request: Login.Request) {
        if let emailError = Validator.isValid(username: request.username) {
            presenter?.presentError(error: emailError)
            return
        }
        if let passwordError = Validator.isValid(password: request.password) {
            presenter?.presentError(error: passwordError)
            return
        }
        
        guard let worker = worker else {
            self.presenter?.presentError(error: "Error")
            return
        }
        worker.doSomeWork(request: request) { [weak self] (result) in
            switch result {
            case .success(let value):
                let response = Login.Response(user: value)
                self?.setupResponse(response: response, username: request.username)
            case .failure(let error):
                self?.presenter?.presentError(error: error.localizedDescription)
            }
        }
    }
    
    private func setupResponse(response: Login.Response, username: String) {
        if let error = response.user?.error.message {
            presenter?.presentError(error: error)
            return
        }
        let newUser = UserRealm()
        newUser.userId = "\(response.user?.userAccount.userId ?? 0)"
        newUser.account = "\(response.user?.userAccount.agency ?? "") / \(response.user?.userAccount.bankAccount ?? "")"
        newUser.balance = "R$ \(response.user?.userAccount.balance ?? 0)"
        newUser.name = response.user?.userAccount.name ?? ""
        newUser.username = username
        if let user = self.user {
            realmWorker.updateObj(obj: user)
        } else {
            self.user = newUser
            realmWorker.saveObjc(obj: newUser)
        }
        presenter?.presentSomething(response: response)
    }
}
