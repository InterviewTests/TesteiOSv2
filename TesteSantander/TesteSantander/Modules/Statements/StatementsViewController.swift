//
//  StatementsViewController.swift
//  TesteSantander
//
//  Created by Felipe Alexander Silva Melo on 29/05/19.
//  Copyright (c) 2019 Felipe Alexander Silva Melo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Rswift

protocol StatementsDisplayLogic: class {
    func displayStatements(viewModel: Statements.Something.ViewModel)
    func displayErrorMessage(message: String)
}

protocol StatementsLogoutViewController: class {
    func logout()
}

class StatementsViewController: UIViewController, StatementsDisplayLogic {
    var interactor: StatementsBusinessLogic?
    var router: (NSObjectProtocol & StatementsRoutingLogic & StatementsDataPassing)?
    
    // MARK: Object lifecycle
    
    init() {
        super.init(nibName: nil, bundle: nil)
        setup()
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = StatementsInteractor()
        let presenter = StatementsPresenter()
        let router = StatementsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    // MARK: View lifecycle
    static let cellIdentifier = "cellIdentifier"
    static let rowHeight: CGFloat = 95
    static let headerHeight: CGFloat = 50.2
    
    @IBOutlet weak var headerView: UIView!
    @IBOutlet weak var tableView: UITableView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupLayout()
        setupTableView()
        interactor?.fetchStatements()
    }
    
    fileprivate func setupLayout() {
        guard let statementsHeaderView = R.nib.statementsHeaderView.firstView(owner: nil) else { return }
        headerView.addSubview(statementsHeaderView)
        statementsHeaderView.setup(name: router?.dataStore?.userAccount?.name ?? "Erro ao carregar o usuário", statementsLogoutViewController: self)
        statementsHeaderView.pinToSuperview()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func displayStatements(viewModel: Statements.Something.ViewModel) {
        tableView.reloadData()
    }
    
    func displayErrorMessage(message: String) {
        
    }
}

extension StatementsViewController: StatementsLogoutViewController {
    func logout() {
        navigationController?.popViewController(animated: true)
    }
}

extension StatementsViewController: UITableViewDataSource, UITableViewDelegate {
    fileprivate func setupTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        
        tableView.register(
            UINib(
                nibName: "StatementTableViewCell",
                bundle: nil
            ),
            forCellReuseIdentifier: StatementsViewController.cellIdentifier
        )
        tableView.tableFooterView = UIView()
        tableView.sectionHeaderHeight = StatementsViewController.headerHeight
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView = StatementHeaderView()
        headerView.setup()
        return headerView
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return router?.dataStore?.userStatements?.statementList.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: StatementsViewController.cellIdentifier, for: indexPath) as? StatementTableViewCell {
            let statement = router?.dataStore?.userStatements?.statementList[indexPath.row]
            cell.setup(
                title: statement?.title ?? "Dado inválido",
                desc: statement?.desc ?? "Dado inválido",
                date: statement?.date ?? "Dado inválido",
                value: statement?.value?.currencyFormat() ?? "Dado inválido"
            )
            return cell
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return StatementsViewController.rowHeight
    }
}
