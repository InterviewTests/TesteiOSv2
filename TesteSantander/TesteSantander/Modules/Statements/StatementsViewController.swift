//
//  StatementsViewController.swift
//  TesteSantander
//
//  Created by Felipe Alexander Silva Melo on 29/05/19.
//  Copyright (c) 2019 Felipe Alexander Silva Melo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Rswift

protocol StatementsDisplayLogic: class {
    func displaySomething(viewModel: Statements.Something.ViewModel)
}

protocol StatementsLogoutViewController: class {
    func logout()
}

class StatementsViewController: UIViewController, StatementsDisplayLogic {
    var interactor: StatementsBusinessLogic?
    var router: (NSObjectProtocol & StatementsRoutingLogic & StatementsDataPassing)?
    
    // MARK: Object lifecycle
    
    init() {
        super.init(nibName: nil, bundle: nil)
        setup()
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = StatementsInteractor()
        let presenter = StatementsPresenter()
        let router = StatementsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    // MARK: View lifecycle
    @IBOutlet weak var headerView: UIView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupLayout()
        interactor?.fetchStatements()
    }
    
    fileprivate func setupLayout() {
        guard let statementsHeaderView = R.nib.statementsHeaderView.firstView(owner: nil) else { return }
        headerView.addSubview(statementsHeaderView)
        statementsHeaderView.setup(name: router?.dataStore?.userAccount?.name ?? "Erro ao carregar o usu√°rio", statementsLogoutViewController: self)
        statementsHeaderView.pinToSuperview()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func displaySomething(viewModel: Statements.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

extension StatementsViewController: StatementsLogoutViewController {
    func logout() {
        navigationController?.popViewController(animated: true)
    }
}
