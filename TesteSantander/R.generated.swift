//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `InfoView`.
    static let infoView = _R.nib._InfoView()
    /// Nib `LoginViewController`.
    static let loginViewController = _R.nib._LoginViewController()
    /// Nib `NavigationView`.
    static let navigationView = _R.nib._NavigationView()
    /// Nib `SplashViewController`.
    static let splashViewController = _R.nib._SplashViewController()
    /// Nib `StatementTableViewCell`.
    static let statementTableViewCell = _R.nib._StatementTableViewCell()
    /// Nib `StatementsHeaderView`.
    static let statementsHeaderView = _R.nib._StatementsHeaderView()
    /// Nib `StatementsViewController`.
    static let statementsViewController = _R.nib._StatementsViewController()
    
    /// `UINib(name: "InfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.infoView) instead")
    static func infoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.infoView)
    }
    
    /// `UINib(name: "LoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginViewController) instead")
    static func loginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginViewController)
    }
    
    /// `UINib(name: "NavigationView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.navigationView) instead")
    static func navigationView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.navigationView)
    }
    
    /// `UINib(name: "SplashViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.splashViewController) instead")
    static func splashViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.splashViewController)
    }
    
    /// `UINib(name: "StatementTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.statementTableViewCell) instead")
    static func statementTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.statementTableViewCell)
    }
    
    /// `UINib(name: "StatementsHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.statementsHeaderView) instead")
    static func statementsHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.statementsHeaderView)
    }
    
    /// `UINib(name: "StatementsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.statementsViewController) instead")
    static func statementsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.statementsViewController)
    }
    
    static func infoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoView? {
      return R.nib.infoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoView
    }
    
    static func loginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func navigationView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NavigationView? {
      return R.nib.navigationView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NavigationView
    }
    
    static func splashViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.splashViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func statementTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StatementTableViewCell? {
      return R.nib.statementTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StatementTableViewCell
    }
    
    static func statementsHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StatementsHeaderView? {
      return R.nib.statementsHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StatementsHeaderView
    }
    
    static func statementsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.statementsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _LoginViewController.validate()
      try _NavigationView.validate()
      try _SplashViewController.validate()
    }
    
    struct _InfoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoView
      }
      
      fileprivate init() {}
    }
    
    struct _LoginViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NavigationView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NavigationView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NavigationView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NavigationView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logout' is used in nib 'NavigationView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SplashViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SplashViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _StatementTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StatementTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StatementTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StatementTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _StatementsHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StatementsHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StatementsHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StatementsHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _StatementsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StatementsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
