//
//  StatementsInteractorTests.swift
//  TesteiOSv2Acc
//
//  Created by Marlon Santos Heitor on 29/05/19.
//  Copyright (c) 2019 Marlon Santos Heitor. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2Acc
import XCTest

class StatementsInteractorTests: XCTestCase
{
    // MARK: - Subject under test
    
    var sut: StatementsInteractor!
    
    // MARK: - Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupStatementsInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupStatementsInteractor()
    {
        sut = StatementsInteractor()
    }
    
    // MARK: - Test doubles
    
    class StatementsPresentationLogicSpy: StatementsPresentationLogic
    {
        
        var loadStatementsExpectation: XCTestExpectation?
        var presentStatementsCalled = false
        var inspectableResponse: Statements.LoadStatements.Response?
        func presentStatements(response: Statements.LoadStatements.Response) {
            presentStatementsCalled = true
            loadStatementsExpectation?.fulfill()
            inspectableResponse = response
        }
        
        var presentCustomerDataCalled = false
        func presentCustomerData(response: Statements.LoadCustomerData.Response) {
            presentCustomerDataCalled = true
        }
        
        var presentLoggedOutCalled = false
        func presentLoggedOut(response: Statements.Logout.Response) {
            presentLoggedOutCalled = true
        }
    }
    
    // MARK: - Tests
    
    func testLoadCustomerData()
    {
        // Given
        let spy = StatementsPresentationLogicSpy()
        sut.presenter = spy
        
        let userAccount = UserAccount(userId: 5, name: "T5", bankAccount: "5555", agency: "44444444", balance: 51)
        
        let request = Statements.LoadCustomerData.Request(userAccount: userAccount)
        
        // When
        sut.loadCustomerData(request: request)
        
        // Then
        XCTAssertTrue(spy.presentCustomerDataCalled)
    }
    
    func testLoadStatements()
    {
        // Given
        let spy = StatementsPresentationLogicSpy()
        sut.presenter = spy
        spy.loadStatementsExpectation = self.expectation(description: "LoadStatements")
        
        let request = Statements.LoadStatements.Request(userId: 1)
        
        // When
        sut.loadStatements(request: request)
        
        waitForExpectations(timeout: 20, handler: nil)
        
        // Then
        XCTAssertTrue(spy.presentStatementsCalled)
        XCTAssertFalse(spy.inspectableResponse!.statements!.isEmpty)
        XCTAssertTrue(spy.inspectableResponse!.serviceError == nil)
    }
    
    func testLogout()
    {
        // Given
        let spy = StatementsPresentationLogicSpy()
        sut.presenter = spy
        
        let request = Statements.Logout.Request()
        
        // When
        sut.logout(request: request)
        
        // Then
        XCTAssertTrue(spy.presentLoggedOutCalled)
    }
    
}
