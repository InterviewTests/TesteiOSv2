//
//  StatementsPresenterTests.swift
//  TesteiOSv2Acc
//
//  Created by Marlon Santos Heitor on 29/05/19.
//  Copyright (c) 2019 Marlon Santos Heitor. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2Acc
import XCTest

class StatementsPresenterTests: XCTestCase
{
    // MARK: - Subject under test
    
    var sut: StatementsPresenter!
    
    // MARK: - Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupStatementsPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupStatementsPresenter()
    {
        sut = StatementsPresenter()
    }
    
    // MARK: - Test doubles
    
    class StatementsDisplayLogicSpy: StatementsDisplayLogic
    {
        var displayStatementsViewModel: Statements.LoadStatements.ViewModel?
        var displayStatementsCalled = false
        func displayStatements(viewModel: Statements.LoadStatements.ViewModel) {
            displayStatementsCalled = true
            displayStatementsViewModel = viewModel
        }
        
        var displayCustomerDataViewModel: Statements.LoadCustomerData.ViewModel?
        var displayCustomerDataCalled = false
        func displayCustomerData(viewModel: Statements.LoadCustomerData.ViewModel) {
            displayCustomerDataCalled = true
            displayCustomerDataViewModel = viewModel
        }
        
        var displayLoggedOutCalled = false
        func displayLoggedOut(viewModel: Statements.Logout.ViewModel) {
            displayLoggedOutCalled = true
        }
    }
    
    // MARK: - Tests
    
    func testPresentLoadCustomerData()
    {
        // Given
        let spy = StatementsDisplayLogicSpy()
        sut.viewController = spy
        
        let userAccount = UserAccount(userId: 6, name: "T4", bankAccount: "4444", agency: "33333333", balance: 25)
        
        let response = Statements.LoadCustomerData.Response(userAccount: userAccount)
        
        // When
        sut.presentCustomerData(response: response)
        
        // Then
        XCTAssertEqual(spy.displayCustomerDataViewModel?.fullname, "T4")
        XCTAssertEqual(spy.displayCustomerDataViewModel?.bankAgencyAccount, "4444 / 33.33333-3")
        XCTAssertEqual(spy.displayCustomerDataViewModel?.balance, "R$\u{00a0}25,00")
    }
    
    func testPresentLogout()
    {
        // Given
        let spy = StatementsDisplayLogicSpy()
        sut.viewController = spy
        
        let response = Statements.Logout.Response()
        
        // When
        sut.presentLoggedOut(response: response)
        
        // Then
        XCTAssertTrue(spy.displayLoggedOutCalled)
    }
    
    func testPresentLoadStatements()
    {
        // Given
        let spy = StatementsDisplayLogicSpy()
        sut.viewController = spy
        
        let statements: [Statement] =
        [
            Statement(title: "Pagamento", desc: "Conta de luz", date: "2018-08-15", value: -50),
            Statement(title: "TED Recebida", desc: "Joao Alfredo", date: "2018-07-25", value: 745.03)
        ]
        
        let response = Statements.LoadStatements.Response(statements: statements, serviceError: nil)
        
        // When
        sut.presentStatements(response: response)
        
        // Then
        XCTAssertTrue(spy.displayStatementsViewModel!.statementsData!.count > 0)
        
        let statementData1 = spy.displayStatementsViewModel!.statementsData![0]
        
        XCTAssertEqual(statementData1.title, "Pagamento")
        XCTAssertEqual(statementData1.description, "Conta de luz")
        XCTAssertEqual(statementData1.date, "15/08/2018")
        XCTAssertEqual(statementData1.value, "-R$\u{00a0}50,00")
        
        let statementData2 = spy.displayStatementsViewModel!.statementsData![1]
        
        XCTAssertEqual(statementData2.title, "TED Recebida")
        XCTAssertEqual(statementData2.description, "Joao Alfredo")
        XCTAssertEqual(statementData2.date, "25/07/2018")
        XCTAssertEqual(statementData2.value, "R$\u{00a0}745,03")
        
    }
}
