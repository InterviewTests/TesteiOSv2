//
//  StatementsViewControllerTests.swift
//  TesteiOSv2Acc
//
//  Created by Marlon Santos Heitor on 29/05/19.
//  Copyright (c) 2019 Marlon Santos Heitor. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2Acc
import XCTest

class StatementsViewControllerTests: XCTestCase
{
    // MARK: - Subject under test
    
    var sut: StatementsViewController!
    var window: UIWindow!
    
    // MARK: - Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupStatementsViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupStatementsViewController()
    {
        let bundle = Bundle(for: StatementsViewController.self)
        let storyboard = UIStoryboard(name: "Statements", bundle: bundle)
        sut = storyboard.instantiateInitialViewController() as! StatementsViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: - Test doubles
    
    class StatementsBusinessLogicSpy: StatementsBusinessLogic
    {
        var loadStatementsCalled = false
        func loadStatements(request: Statements.LoadStatements.Request) {
            loadStatementsCalled = true
        }
        
        var loadCustomerDataCalled = false
        func loadCustomerData(request: Statements.LoadCustomerData.Request) {
            loadCustomerDataCalled = true
        }
        
        var logoutCalled = false
        func logout(request: Statements.Logout.Request) {
            logoutCalled = true
        }
    }
    
    // MARK: - Tests
    
    func testLoadCustomerDataWhenViewIsLoaded()
    {
        // Given
        let spy = StatementsBusinessLogicSpy()
        sut.interactor = spy
        
        let userAccount = UserAccount(userId: 8, name: "T8", bankAccount: "8888", agency: "99999999", balance: -10.45)
        
        var dataStore = sut.router!.dataStore!
        passDataTo(userAccount: userAccount, destination: &dataStore)
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.loadCustomerDataCalled)
    }
    
    private func passDataTo(userAccount: UserAccount, destination: inout StatementsDataStore)
    {
        destination.userAccount = userAccount
    }
    
    func testDisplayLoadCustomerData()
    {
        // Given
        let fullname = "T6 T6"
        let bankAgencyAccount = "6666 / 55555555"
        let balance = "R$ 52,00"
        let viewModel = Statements.LoadCustomerData.ViewModel(fullname: fullname, bankAgencyAccount: bankAgencyAccount, balance: balance)
        
        // When
        loadView()
        sut.displayCustomerData(viewModel: viewModel)
        
        // Then
        XCTAssertEqual(sut.customerNameLabel.text, fullname)
        XCTAssertEqual(sut.bankAccountLabel.text, bankAgencyAccount)
        XCTAssertEqual(sut.bankAccountBalanceLabel.text, balance)
    }
    
    func testLoadStatementsWhenViewIsLoaded()
    {
        // Given
        let spy = StatementsBusinessLogicSpy()
        sut.interactor = spy
        
        let userAccount = UserAccount(userId: 8, name: "T8", bankAccount: "8888", agency: "99999999", balance: -10.45)
        
        var dataStore = sut.router!.dataStore!
        passDataTo(userAccount: userAccount, destination: &dataStore)
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.loadStatementsCalled)
    }
}
