//
//  LoginInteractor.swift
//  TesteiOSv2Acc
//
//  Created by Marlon Santos Heitor on 21/05/19.
//  Copyright (c) 2019 Marlon Santos Heitor. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol LoginBusinessLogic
{
    func doLogin(request: Login.LoginUser.Request)
    func loadLoginDataIfExists(request: Login.LoadLoginData.Request)
}

protocol LoginDataStore
{
    var userAccount: UserAccount? { get }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    
    var userAccount: UserAccount?
    
    // MARK: - Initialization
    
    required init() {
        worker = LoginWorker()
    }
    
    // MARK: - Presenter communication
    
    func doLogin(request: Login.LoginUser.Request)
    {
        let user = request.user
        let password = request.password
        
        let inputValidationResult = isUserAndPasswordValid(user: user, password: password)
        
        if (inputValidationResult.isValid()){
            worker?.doLoginRequest(user: user, password: password)
            { userAccount, serviceError in
                
                self.userAccount = userAccount
                
                let response = Login.LoginUser.Response(userAccount: userAccount, serviceError: serviceError)
                
                self.presenter?.presentLoginUser(response: response)
            }
        }else{
            let response = Login.LoginUser.Response(userAccount: nil, serviceError: inputValidationResult.serviceError)
            presenter?.presentLoginUser(response: response)
        }
    }
    
    func loadLoginDataIfExists(request: Login.LoadLoginData.Request)
    {
        let user = worker?.retrieveUserFromKeychain()
        let response = Login.LoadLoginData.Response(user: user)
        presenter?.presentLoadLoginData(response: response)
    }
    
    // MARK: - Validation methods
    
    private func isUserAndPasswordValid(user: String, password: String) -> InputValidationResult
    {
        let userValidationResult = isUserValid(user: user)
        let passwordValidationResult = isPasswordValid(password: password)
        
        if !userValidationResult.isValid(){
            return userValidationResult
        }else if !passwordValidationResult.isValid(){
            return passwordValidationResult
        }
        
        return InputValidationResult(serviceError: nil)
    }
    
    private func isUserValid(user: String) -> InputValidationResult
    {
        if user.isEmpty{
            return InputValidationResult(serviceError: ServiceError(code: -1, message: "Preencha o campo usuário"))
        }
        
        let userValidationResult = Validator.validate(user: user)
        if !userValidationResult.isValid(){
            return userValidationResult
        }
        
        return InputValidationResult(serviceError: nil)
    }
    
    private func isPasswordValid(password: String) -> InputValidationResult
    {
        
        if password.isEmpty{
            return InputValidationResult(serviceError: ServiceError(code: -1, message: "Preencha o campo senha"))
        } else if !Validator.validate(password: password){
            return InputValidationResult(serviceError: ServiceError(code: -1, message: "Usuário ou senha inválida"))
        }
        
        return InputValidationResult(serviceError: nil)
    }
    
}
