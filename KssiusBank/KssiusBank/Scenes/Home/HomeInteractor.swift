//
//  HomeInteractor.swift
//  KssiusBank
//
//  Created by Cassio Sousa on 17/06/23.
//  Copyright (c) 2023 Cassio Sousa. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic
{
    func fetchStatements(request: Home.GetStatements.Request)
    func retrieveAccount(request: Home.GetAccount.Request)
}

protocol HomeDataStore{
    var userAccount: UserAccountModel? { get set }
    var statements: [StatementsModel] { get set }
}

final class HomeInteractor: HomeBusinessLogic, HomeDataStore {

    // MARK: - Properties

    private let presenter: HomePresentationLogic?
    private let worker: HomeWorkerLogic?

    var userAccount: UserAccountModel?
    var statements: [StatementsModel] = []

    // MARK: - Inits

    init(presenter: HomePresentationLogic? = nil, worker: HomeWorkerLogic? = nil, userAccount: UserAccountModel? = nil) {
        self.presenter = presenter
        self.worker = worker
        self.userAccount = userAccount
    }

    // MARK: - Present account
    func retrieveAccount(request: Home.GetAccount.Request = .init()) {
        guard let userAccount = userAccount else { return  }
        presenter?.presentAccount(response: .init(userAccount: userAccount))
    }


    // MARK: - Ppresent statements

    func fetchStatements(request: Home.GetStatements.Request = .init()){

        worker?.fetchStatements { [weak self] result in
            switch( result ) {
            case .success(let statements):
                self?.statements = statements
                self?.presenter?.presentStatements(response: .init(statements: statements))
            case .failure( _):
                self?.presenter?.presentStatements(response: .init(success: false, errorMessage: L10n.Network.Error.general))
            }

        }
    }
}
