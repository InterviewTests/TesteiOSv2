//
//  LoginViewController.swift
//  KssiusBank
//
//  Created by Cassio Sousa on 15/06/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import KeychainSwift

protocol LoginDisplayLogic: AnyObject
{
    func displayUser(viewModel: Login.FetchUser.ViewModel)
    func resolveLogin(viewModel: Login.Login.ViewModel)
}

class LoginViewController: UIViewController
{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup()
    {
        //remote datasource
        let authenticationServiceDataSource = AuthenticationServiceDatasource(networkService: .init())
        let autenticationRepository = AuthenticationRepository(authenticationService: authenticationServiceDataSource)

        //local datasource
        let localDataSource = AuthenticationLocalDatasource(keychain: KeychainSwift())
        let localRepository = AuthenticationLocalRepository(authenticationLocalDataSource: localDataSource)

        let worker = LoginWorker(authenticaionRepository: autenticationRepository)
        let userWork = UserWorker(authenticationLocalRepository: localRepository)
        let viewController = self

        let presenter = LoginPresenter()
        let interactor = LoginInteractor(presenter: presenter, worker: worker, userWork: userWork)
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad()
    {
        super.viewDidLoad()
        fetchUser()
    }

    // MARK: Login

    @IBOutlet weak var userTextField: UITextField?


    func doSomething()
    {
        let request = Login.Login.Request(user: "teste@teste.com", password: "T@to123")
        interactor?.login(request: request)
    }


}

extension LoginViewController: LoginDisplayLogic {
    func displayUser(viewModel: Login.FetchUser.ViewModel) {
        userTextField?.text = viewModel.user
    }

    func resolveLogin(viewModel: Login.Login.ViewModel) {
        //nameTextField.text = viewModel.name
        if viewModel.success {

        }else {

        }
        
    }

}

// MARK: - Fetch User
extension LoginViewController {

    private func fetchUser() {
        interactor?.fetchUser(request: .init())
    }

}
