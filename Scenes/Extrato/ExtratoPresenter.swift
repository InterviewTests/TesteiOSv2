//
//  ExtratoPresenter.swift
//  TesteiOSv2
//
//  Created by Marcel Mendes Filho on 26/02/19.
//  Copyright (c) 2019 Accenture do Brasil Ltda. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ExtratoPresentationLogic
{
    func presentStatement(response: Extrato.Statement.Response)
    func presentMessageToUser(response: Extrato.Statement.Response)
    func presentHeader(response: Extrato.Header.Response)
}

class ExtratoPresenter: ExtratoPresentationLogic
{
    weak var viewController: ExtratoDisplayLogic?

    // MARK: Do something
    
    func presentMessageToUser(response: Extrato.Statement.Response){
        var viewModel = Extrato.Statement.ViewModel()
        if let userMessage = response.userMessage{
            viewModel.userMessage = userMessage
            viewController?.displayMessageToUser(viewModel: viewModel)
        }
    }
    
    func presentHeader(response: Extrato.Header.Response){
        var viewModel = Extrato.Header.ViewModel()
        
        if let userAccount = response.headerData?.userAccount{
            viewModel.customerName = userAccount.name
            viewModel.accountNumber = userAccount.agency + " / " + userAccount.bankAccount
            viewModel.balance = userAccount.balance.currencyFormatted()
        } else {
            viewModel.customerName = ""
            viewModel.accountNumber = ""
            viewModel.balance = ""
        }
        
        viewController?.displayHeaderData(viewModel: viewModel)
    }
  
    func presentStatement(response: Extrato.Statement.Response)
    {
        var viewModel = Extrato.Statement.ViewModel()
        
        if let entries = response.statementEntries{
            viewModel.entries = [Extrato.Statement.ViewModel.statementEntry]()
            
            // populate array
            for entry in entries.statementList{
                var statementEntry = Extrato.Statement.ViewModel.statementEntry()
                statementEntry.title = entry.title
                statementEntry.description = entry.desc
                statementEntry.value = entry.value.currencyFormatted()
                statementEntry.date = entry.date.convertDateFormat()
                statementEntry.dateForSorting = entry.date.getDate()
                
                viewModel.entries?.append(statementEntry)
            }
            
            // sort array
            var sortedViewModel = Extrato.Statement.ViewModel()
            
            sortedViewModel.entries = viewModel.entries?.sorted(by: { ($0.dateForSorting == nil ? Date() : $0.dateForSorting!) < ($1.dateForSorting == nil ? Date() : $1.dateForSorting!)})
            
            viewController?.displayStatement(viewModel: sortedViewModel)
        } else {
            viewModel.userMessage = Constants.Statement.couldNotRetrieveStatement
            viewController?.displayMessageToUser(viewModel: viewModel)
        }
    }
}
