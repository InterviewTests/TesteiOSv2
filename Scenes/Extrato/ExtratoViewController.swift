//
//  ExtratoViewController.swift
//  TesteiOSv2
//
//  Created by Marcel Mendes Filho on 26/02/19.
//  Copyright (c) 2019 Accenture do Brasil Ltda. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ExtratoDisplayLogic: class
{
    func displayStatement(viewModel: Extrato.Statement.ViewModel)
    func displayMessageToUser(viewModel: Extrato.Statement.ViewModel)
    func displayHeaderData(viewModel: Extrato.Header.ViewModel)
}

class ExtratoViewController: UIViewController, ExtratoDisplayLogic
{
    var interactor: ExtratoBusinessLogic?
    var router: (NSObjectProtocol & ExtratoRoutingLogic & ExtratoDataPassing)?
    var statementEntries: [Extrato.Statement.ViewModel.statementEntry]?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ExtratoInteractor()
    let presenter = ExtratoPresenter()
    let router = ExtratoRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        tableView.delegate = self
        tableView.dataSource = self
        
        setupHeader()
        loadStatement()
    }
  
  // MARK: Do something
  
    @IBOutlet weak var customerNameLabel: UILabel!
    @IBOutlet weak var accountNumberLabel: UILabel!
    @IBOutlet weak var balanceLabel: UILabel!
    @IBOutlet weak var tableView: UITableView!
    
    func setupHeader(){
        interactor?.formatHeader(request: Extrato.Header.Request(headerData: router?.dataStore?.userAccount))
    }
    
    func loadStatement()
    {
        interactor?.retrieveStatement()
    }

    func displayStatement(viewModel: Extrato.Statement.ViewModel)
    {
        if let entries = viewModel.entries{
            statementEntries = entries
            
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        }
    }
    
    func displayMessageToUser(viewModel: Extrato.Statement.ViewModel) {
        print("Breakpoing here")
    }
    
    func displayHeaderData(viewModel: Extrato.Header.ViewModel) {
        
        if let customer = viewModel.customerName{
            customerNameLabel.text = customer
        }
        
        if let accountNumber = viewModel.accountNumber{
            accountNumberLabel.text = accountNumber
        }
        
        if let balance = viewModel.balance{
            balanceLabel.text = balance
        }
    }
    
    @IBAction func tappedLogout(_ sender: UIButton) {
        self.dismiss(animated: true, completion: nil)
    }
}

extension ExtratoViewController: UITableViewDataSource, UITableViewDelegate{
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if let entries = statementEntries{
            return entries.count
        } else {
            return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let row = indexPath.row
        let cell = tableView.dequeueReusableCell(withIdentifier: "StatementEntryCell")
        
        if let nib = Bundle.main.loadNibNamed("StatementEntry", owner: self, options: nil){
            if let entryTableCell = nib.first as? EntryTableViewCell{
                
                entryTableCell.view.layer.cornerRadius = 6
                entryTableCell.view.addBorder(color: UIColor.santanderLightGray, width: 0.5)
                entryTableCell.view.addShadow()

                if let thisTitle = statementEntries?[row].title{
                    entryTableCell.entryTypeLabel.text = thisTitle
                } else {
                    entryTableCell.entryTypeLabel.text = ""
                }
                
                if let thisDescription = statementEntries?[row].description{
                    entryTableCell.entryDescriptionLabel.text = thisDescription
                } else {
                    entryTableCell.entryDescriptionLabel.text = ""
                }
                
                if let thisDate = statementEntries?[row].date{
                    entryTableCell.entryDateLabel.text = thisDate
                } else {
                    entryTableCell.entryDateLabel.text = ""
                }
                
                if let thisValue = statementEntries?[row].value{
                    entryTableCell.entryValueLabel.text = thisValue
                } else {
                    entryTableCell.entryValueLabel.text = ""
                }
                
                return entryTableCell
            }
        }
            
        return cell!
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
}
