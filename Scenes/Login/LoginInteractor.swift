//
//  LoginInteractor.swift
//  TesteiOSv2
//
//  Created by Marcel Mendes Filho on 26/02/19.
//  Copyright (c) 2019 Accenture do Brasil Ltda. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
    func validateCredentials(credentialsRequest: Login.CredentialsValidation.Request)
    func retrieveLastUserLogin(request: Login.LastUserLogin.Request)
}

protocol LoginDataStore
{
    var userAccount: UserAccountModel? { get }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    var userAccount: UserAccountModel?
    
    // MARK: Do something
    
    func retrieveLastUserLogin(request: Login.LastUserLogin.Request){
        if let username = UserDefaults.standard.string(forKey: request.userDefaultsKey){
            presenter?.prefillUsername(response: Login.LastUserLogin.Response(username: username))
        }
    }
    
    func validateCredentials(credentialsRequest: Login.CredentialsValidation.Request){
        if worker == nil{
            worker = LoginWorker()
        }
        
        // valida campo username
        if let isValid = worker?.isUsernameValid(username: credentialsRequest.username), !isValid{
            var invalidResponse = Login.CredentialsValidation.Response()
            invalidResponse.isUsernameValid = false
            presenter?.processResult(response: invalidResponse)
            return
        }

        // valida campo password
        if let isValid = worker?.isPasswordValid(password: credentialsRequest.password), !isValid{
            var invalidResponse = Login.CredentialsValidation.Response()
            invalidResponse.isPasswordValid = false
            presenter?.processResult(response: invalidResponse)
            return
        }

        // autentica credenciais
        worker?.validateCredentials(username: credentialsRequest.username, password: credentialsRequest.password, completionResult: { (userAccount, result) in
            var response = Login.CredentialsValidation.Response()
            
            if !result{
                response.areCredentialsValid = false
            } else {
                
                // persiste o usu√°rio
                self.persistsUsername(username: credentialsRequest.username)
                
                response.userAccount = userAccount
                self.userAccount = userAccount
            }
            
            DispatchQueue.main.async {
                self.presenter?.processResult(response: response)
            }
        })
    }
    
    private func persistsUsername(username: String){
        UserDefaults.standard.set(username, forKey: Login.LastUserLogin.Request().userDefaultsKey)
    }
    
}
