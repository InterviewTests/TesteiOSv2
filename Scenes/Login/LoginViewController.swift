//
//  LoginViewController.swift
//  TesteiOSv2
//
//  Created by Marcel Mendes Filho on 26/02/19.
//  Copyright (c) 2019 Accenture do Brasil Ltda. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func setUsernameTextField(viewModel: Login.LastUserLogin.ViewModel)
    func displayInvalidUserErrorMessage(viewModel: Login.CredentialsValidation.ViewModel)
    func displayInvalidPasswordErrorMessage(viewModel: Login.CredentialsValidation.ViewModel)
    func displayInvalidCredentials(viewModel: Login.CredentialsValidation.ViewModel)
    func finishedCredentialsValidation(response: Login.CredentialsValidation.Response)
}

class LoginViewController: UIViewController, LoginDisplayLogic, UITextFieldDelegate
{
    
  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    var invalidField: UITextField?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    customizeLoginButton()
    prefillWithLastUser()
  }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        if let username = textFields[0].text, username.count > 0{
            textFields[1].becomeFirstResponder()
        }
    }
  
  // MARK: Do something
    func customizeLoginButton(){
        loginButton.layer.cornerRadius = 4
        loginButton.layer.masksToBounds = true
    }
    
    func displayInvalidUserErrorMessage(viewModel: Login.CredentialsValidation.ViewModel)
    {
        loading.stopAnimating()
        if let userMessage = viewModel.userMessage{
            errorMessageLabel.isHidden = false
            errorMessageLabel.text = userMessage
            textFields[0].becomeFirstResponder()
            invalidField = textFields[0]
        }
    }

    func displayInvalidPasswordErrorMessage(viewModel: Login.CredentialsValidation.ViewModel)
    {
        loading.stopAnimating()
        if let userMessage = viewModel.userMessage{
            errorMessageLabel.isHidden = false
            errorMessageLabel.text = userMessage
            textFields[1].becomeFirstResponder()
            invalidField = textFields[1]
        }
    }
    
    func displayInvalidCredentials(viewModel: Login.CredentialsValidation.ViewModel) {
        loading.stopAnimating()
        if let userMessage = viewModel.userMessage{
            errorMessageLabel.isHidden = false
            errorMessageLabel.text = userMessage
            invalidField = textFields[1]
        }
    }
    
    func setUsernameTextField(viewModel: Login.LastUserLogin.ViewModel){
        if let username = viewModel.username{
            textFields[0].text = username
            textFields[1].becomeFirstResponder()
        } else {
            textFields[0].becomeFirstResponder()
        }
    }

    func finishedCredentialsValidation(response: Login.CredentialsValidation.Response) {
        loading.stopAnimating()
        
        if response.areCredentialsValid && response.isPasswordValid && response.isUsernameValid{
            textFields[1].text = ""
            
            performSegue(withIdentifier: "ShowStatement", sender: self)
        }
    }
    
    func prefillWithLastUser(){
        interactor?.retrieveLastUserLogin(request: Login.LastUserLogin.Request())
    }

    // MARK: Text Fields and Buttons
    @IBOutlet weak var loginButton: UIButton!
    @IBOutlet var textFields: [UITextField]!
    @IBOutlet weak var errorMessageLabel: UILabel!
    @IBOutlet weak var loading: UIActivityIndicatorView!
    
    // MARK: Text Field Delegates
    func textFieldShouldReturn(_ textField: UITextField) -> Bool
    {
        textField.resignFirstResponder()
        if let index = textFields.index(of: textField) {
            if index < textFields.count - 1 {
                let nextTextField = textFields[index + 1]
                nextTextField.becomeFirstResponder()
            }
        }
        return true
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if let invalidField = invalidField, textField == invalidField{
            errorMessageLabel.isHidden = true
        }
        
        return true
    }
    
    // MARK: Start Login Action
    @IBAction func loginTapped(_ sender: Any) {
        if let thisUsername = textFields[0].text, let thisPassword = textFields[1].text{
            loading.startAnimating()
            loading.isHidden = false
            interactor?.validateCredentials(credentialsRequest: Login.CredentialsValidation.Request(username: thisUsername, password: thisPassword))
        }
    }
}
