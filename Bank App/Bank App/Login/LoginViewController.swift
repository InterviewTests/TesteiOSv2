//
//  LoginViewController.swift
//  Bank App
//
//  Created by Christian Castro on 28/04/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class {
    func displaySomething(viewModel: Login.Something.ViewModel)
}

class LoginViewController: CustomViewController, LoginDisplayLogic {
    
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    @IBOutlet weak var errorMessageLabel: UILabel!
    @IBOutlet weak var userTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var loginButton: UIButton!
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        getSavedUser()
        doSomething()
    }
    
    // MARK: Do something
    
    private func setupView() {
        setupTextField()
        setupLabel()
    }
    
    private func setupTextField() {
        userTextField.delegate = self
        passwordTextField.delegate = self
        userTextField.keyboardType = .emailAddress
        passwordTextField.isSecureTextEntry = true
    }
    
    private func setupLabel() {
        errorMessageLabel.text = ""
        errorMessageLabel.minimumScaleFactor = 0.5
        errorMessageLabel.adjustsFontSizeToFitWidth = true
        loginButton.isEnabled = false
        loginButton.layer.cornerRadius = 10
    }
        
    private func checkUsersField() -> Bool {
        guard let user = userTextField.text else { return false}
        let isValidUser = Validator.validateUser(user: user)
        return isValidUser
    }
    
    private func checkPasswordField() -> Bool {
        guard let password = passwordTextField.text else { return false}
        let isValidPassword = Validator.validatePassword(password: password)
        return isValidPassword
    }
    
    private func readyToLogin() -> Bool {
        let isValidUser = checkUsersField()
        let isValidPassword = checkPasswordField()
        
        if isValidUser && !passwordTextField.hasText {
            errorMessageLabel.text = ""
        } else if !isValidUser {
            errorMessageLabel.text = "Please, enter a valid email adress or a valid CPF number."
        } else if isValidUser && !isValidPassword && passwordTextField.text != "" {
            errorMessageLabel.text = "Enter a password with numbers, uppercase and special characters"
        } else if isValidUser && isValidPassword {
            errorMessageLabel.text = ""
        }
        
        return isValidUser && isValidPassword
    }
    
    func doSomething() {
        let request = Login.Something.Request()
        interactor?.doSomething(request: request)
        
    }
    
    func displaySomething(viewModel: Login.Something.ViewModel) {
        
    }
    
    private func saveUser() {
        guard let user = userTextField.text,
              let password = passwordTextField.text else { return }
        KeychainWrapper.standard.set(user, forKey: "bank.app.user")
        KeychainWrapper.standard.set(password, forKey: "bank.app.password")
    }
    
    private func getSavedUser() {
        let user = KeychainWrapper.standard.string(forKey: "bank.app.user")
        let password = KeychainWrapper.standard.string(forKey: "bank.app.password")
        userTextField.text = user
        passwordTextField.text = password
    }
    
    @IBAction func loginTapped(_ sender: Any) {
        saveUser()
        router?.routeToCurrency(segue: nil)
    }
}

extension LoginViewController: UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        errorMessageLabel.isHidden = false
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        errorMessageLabel.isHidden = true
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.view.endEditing(true)
        return false
    }
    
    func textFieldDidChangeSelection(_ textField: UITextField) {
        if textField.hasText {
            loginButton.isEnabled = readyToLogin()
        } else { errorMessageLabel.text = "" }
    }
}
