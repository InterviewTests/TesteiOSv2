//
//  LoginInteractor.swift
//  Bank App
//
//  Created by Christian Castro on 28/04/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
    func doSomething(request: Login.Something.Request)
    func readyToLogin(user: String, password: String) -> Bool
    func setErrorMessage(user: String, password: String) -> String
    func login(user: String, password: String, completion: @escaping () -> ())
    func setLoginErrorMessage() -> String
}

protocol LoginDataStore {
    var userInfo: User? { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    var dataWorker: UserDataWorker?
    
    var userInfo: User?
    var userMessage: String?
    
    func doSomething(request: Login.Something.Request) {
        dataWorker = UserDataWorker()
        var response = Login.Something.Response()
        guard let name = dataWorker?.fetchCurrentUser(),
              let password = dataWorker?.fetchCurrentPassword() else { return }
        response.user = name
        response.password = password
        response.userInfo = userInfo
        presenter?.presentSomething(response: response)
    }
    
    func sendErrorMessage() {
        var response = Login.Something.Response()
        response.errorMessage = userMessage
        presenter?.presentErrorMessage(response: response)
    }
    
    func readyToLogin(user: String, password: String) -> Bool {
        dataWorker = UserDataWorker()
        guard let isValidUser = dataWorker?.checkUsersField(user: user),
              let isValidPassword = dataWorker?.checkPasswordField(password: password) else { return false }
        return isValidUser && isValidPassword
    }
    
    func login(user: String, password: String, completion: @escaping () -> ()) {
        worker = LoginWorker()
        dataWorker = UserDataWorker()
        worker?.login(path: "login", user: user, password: password) { (result) in
            switch result {
            case .success(let data):
                self.dataWorker?.saveUser(user: user, password: password)
                self.userInfo = data
                completion()
            case .failure(let error):
                print(error)
                DispatchQueue.main.async {
                    self.userMessage = self.setLoginErrorMessage()
                    self.sendErrorMessage()
                }
            }
        }
    }
    
    func setLoginErrorMessage() -> String {
        let message = "Sorry, we couldn't complete your login. But we're working on it. Honest."
        return message
    }
    
    func setErrorMessage(user: String, password: String) -> String {
        dataWorker = UserDataWorker()
        guard let isValidUser = dataWorker?.checkUsersField(user: user),
              let isValidPassword = dataWorker?.checkPasswordField(password: password) else { return "" }
        var message = ""
        if user.isEmpty && password.isEmpty {
            message = ""
        } else if isValidUser && password.isEmpty {
            message = ""
        } else if user.isEmpty && isValidPassword {
            message = ""
        } else if !isValidUser {
            message = "Please, enter a valid email adress or a valid CPF number."
        } else if !isValidPassword {
            message = "Enter a password with numbers, uppercase and special characters"
        }
        return message
    }
}
