//
//  LoginViewController.swift
//  Bank App
//
//  Created by Christian Castro on 28/04/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class {
    func displaySomething(viewModel: Login.Something.ViewModel)
    func displayErrorMessage(viewModel: Login.Something.ViewModel)
}

class LoginViewController: CustomViewController, LoginDisplayLogic {
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    @IBOutlet weak var errorMessageLabel: UILabel!
    @IBOutlet weak var userTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var loginButton: UIButton!
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        doSomething()
    }

    private func setupView() {
        setupTextField()
        setupLabel()
    }
    
    private func setupTextField() {
        userTextField.delegate = self
        passwordTextField.delegate = self
        userTextField.keyboardType = .emailAddress
        passwordTextField.isSecureTextEntry = true
    }
    
    private func setupLabel() {
        errorMessageLabel.text = ""
        errorMessageLabel.minimumScaleFactor = 0.5
        errorMessageLabel.adjustsFontSizeToFitWidth = true
        loginButton.isEnabled = false
        loginButton.layer.cornerRadius = 10
    }
    
    func doSomething() {
        let request = Login.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Login.Something.ViewModel) {
        userTextField.text = viewModel.user
        passwordTextField.text = viewModel.password
        loginButton.isEnabled = userTextField.hasText && passwordTextField.hasText
    }
    
    func displayErrorMessage(viewModel: Login.Something.ViewModel) {
        errorMessageLabel.text = viewModel.errorMessage
        let alert = UIAlertController(title: "Something here", message: viewModel.errorMessage, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Ok", style: .cancel, handler: { _ in }))
        self.present(alert, animated: true) { }
    }
    
    @IBAction func loginTapped(_ sender: Any) {
        guard let user = userTextField.text,
              let password = passwordTextField.text else { return }
        interactor?.login(user: user, password: password) {
            self.router?.routeToCurrency()
        }
    }
    //MARK: Alternative for previous versions of iOS
    @IBAction func editingUserTextField(_ sender: Any) {
        guard let user = userTextField.text,
              let password = passwordTextField.text,
              let ready = interactor?.readyToLogin(user: user, password: password) else { return }
        errorMessageLabel.text = interactor?.setErrorMessage(user: user, password: password)
        loginButton.isEnabled = ready
    }
    
    @IBAction func editingPasswordTextField(_ sender: Any) {
        guard let user = userTextField.text,
              let password = passwordTextField.text,
              let ready = interactor?.readyToLogin(user: user, password: password) else { return }
        errorMessageLabel.text = interactor?.setErrorMessage(user: user, password: password)
        loginButton.isEnabled = ready
    }
}

extension LoginViewController: UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        errorMessageLabel.isHidden = false
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        errorMessageLabel.isHidden = true
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.view.endEditing(true)
        return false
    }
    
    @available (iOS 13.0, *)
    func textFieldDidChangeSelection(_ textField: UITextField) {
        if textField.hasText {
            guard let user = userTextField.text,
                  let password = passwordTextField.text,
                  let ready = interactor?.readyToLogin(user: user, password: password) else { return }
            errorMessageLabel.text = interactor?.setErrorMessage(user: user, password: password)
            loginButton.isEnabled = ready
        }
    }
}
