//
//  LoginWorker.swift
//  Bank App
//
//  Created by Christian Castro on 28/04/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

private var dataTask: URLSessionDataTask?
private let decoder = JSONDecoder()

class LoginWorker: BankApiProtocol {
    var path: String = ""
    
    func login(path:String, user: String, password: String, completion: @escaping (Result<User, Error>) -> Void) {
        if AppConfig.enableAPI {
            let parameters = "{\"user\" : \"\(user)\"&\"password\" : \"\(password)\"}"
            let postData = parameters.data(using: .utf8)
            let requestURL = "\(baseURL)\(path)"
            guard let url = URL(string: requestURL) else {return}
            var request = URLRequest(url: url)
            request.httpMethod = HTTPMethod.post.rawValue
            request.addValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
            request.httpBody = postData
            dataTask = URLSession.shared.dataTask(with: request) { (data, response, error) in
                guard let data = data,
                      let response = response else { return }
                if let error = error {
                    completion(.failure(error))
                    print("DataTask error: \(error.localizedDescription)")
                    return
                }
                print(response)
                do {
                    let data = try decoder.decode(User.self, from: data)
                    DispatchQueue.main.async { completion(.success(data)) }
                } catch let error { completion(.failure(error)) }
            }
            dataTask?.resume()
            
        } else {
            guard let file = Bundle.main.url(forResource: "userJson", withExtension: "json") else { return }
            do {
                let data = try Data(contentsOf: file)
                let user = try decoder.decode(User.self, from: data)
                DispatchQueue.main.async { completion(.success(user)) }
            } catch  {
                print("something happen")
            }
        }
    }
    
    func getCurrencyByUser(user: Int, completion: @escaping (Result<[CurrencyByUser], Error>) -> Void) {
    }
}
