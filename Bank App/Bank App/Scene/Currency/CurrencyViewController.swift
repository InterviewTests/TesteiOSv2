//
//  CurrencyViewController.swift
//  Bank App
//
//  Created by Christian Castro on 29/04/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrencyDisplayLogic: class {
    func displaySomething(viewModel: Currency.Something.ViewModel)
}

class CurrencyViewController: CustomViewController, CurrencyDisplayLogic {
    var interactor: CurrencyBusinessLogic?
    var router: (NSObjectProtocol & CurrencyRoutingLogic & CurrencyDataPassing)?
    
    @IBOutlet weak var userNameLabel: UILabel!
    @IBOutlet weak var exitButton: UIButton!
    @IBOutlet weak var accountNumberLabel: UILabel!
    @IBOutlet weak var cashLabel: UILabel!
    @IBOutlet weak var tableview: UITableView!
    
    var currencyData: [CurrencyByUser]?
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = CurrencyInteractor()
        let presenter = CurrencyPresenter()
        let router = CurrencyRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
//        setupTableView()
        doSomething()
    }
    
    func doSomething() {
        let request = Currency.Something.Request()
        interactor?.getCurrencyByUser {
            self.interactor?.doSomething(request: request)
            self.setupTableView()
        }
    }
    
    func displaySomething(viewModel: Currency.Something.ViewModel) {
        userNameLabel.text = viewModel.name
        accountNumberLabel.text = viewModel.accountID
        cashLabel.text = viewModel.balance
        currencyData = viewModel.userCurrency
    }
    
    private func setupTableView() {
        tableview.delegate = self
        tableview.dataSource = self
        tableview.register(CurrencyTableViewCell.nib(), forCellReuseIdentifier: CurrencyTableViewCell.identifier)
    }
    
    @IBAction func exitTapped(_ sender: Any) {
        router?.routeToLogin(segue: nil)
    }
}

extension CurrencyViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 104
    }
}
extension CurrencyViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let dataCount = currencyData?.count else { return 0 }
        return dataCount
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CurrencyTableViewCell.identifier, for: indexPath) as? CurrencyTableViewCell else { return UITableViewCell() }
        guard let currencyData = currencyData else { return CurrencyTableViewCell() }
        cell.configureCell(user: currencyData[indexPath.row])
        return cell
    }
}
