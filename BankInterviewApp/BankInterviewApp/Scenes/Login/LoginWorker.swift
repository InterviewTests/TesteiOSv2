//
//  LoginWorker.swift
//  BankInterviewApp
//
//  Created by Osias Carneiro on 10/03/20.
//  Copyright (c) 2020 Osias Carneiro. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

class LoginWorker
{
    
    private let regexPassword = "^(?=.*[a-zA-Z0-9])(?=.*[A-Z])(?=.*[^A-Za-z0-9])"
    
    func validateUser(_ user: String) -> Bool
    {
        //Valida CPF e Email, invalido se nenhuma das duas validacoes passar
        return validateCPF(originalCpf: user) || validateEmail(email: user)
    }
    
    func validatePassword(_ password: String) -> Bool {
        let regex = try! NSRegularExpression(pattern: regexPassword)
        return regex.firstMatch(in: password, options: [], range: NSRange(location: 0, length: password.count)) != nil
    }
    
    private func validateEmail(email: String) -> Bool
    {
        let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"

        let emailPred = NSPredicate(format:"SELF MATCHES %@", emailRegEx)
        return emailPred.evaluate(with: email)
    }
    
    private func validateCPF(originalCpf: String) -> Bool
    {
        let cpf = self.onlyNumbers(originalCpf)
        guard cpf.count == 11 else { return false }

        let i1 = cpf.index(cpf.startIndex, offsetBy: 9)
        let i2 = cpf.index(cpf.startIndex, offsetBy: 10)
        let i3 = cpf.index(cpf.startIndex, offsetBy: 11)
        let d1 = Int(cpf[i1..<i2])
        let d2 = Int(cpf[i2..<i3])

        var temp1 = 0, temp2 = 0

        for i in 0...8 {
            let start = cpf.index(cpf.startIndex, offsetBy: i)
            let end = cpf.index(cpf.startIndex, offsetBy: i+1)
            let char = Int(cpf[start..<end])

            temp1 += char! * (10 - i)
            temp2 += char! * (11 - i)
        }

        temp1 %= 11
        temp1 = temp1 < 2 ? 0 : 11-temp1

        temp2 += temp1 * 2
        temp2 %= 11
        temp2 = temp2 < 2 ? 0 : 11-temp2

        return temp1 == d1 && temp2 == d2
    }
    
    private func onlyNumbers(_ cpf: String) -> String
    {
        guard !cpf.isEmpty else { return "" }
        return cpf.replacingOccurrences(of: "\\D",
                                    with: "",
                                    options: .regularExpression,
                                    range: cpf.startIndex..<cpf.endIndex)
    }
}
