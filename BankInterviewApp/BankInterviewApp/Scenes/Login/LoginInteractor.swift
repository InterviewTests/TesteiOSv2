//
//  LoginInteractor.swift
//  BankInterviewApp
//
//  Created by Osias Carneiro on 10/03/20.
//  Copyright (c) 2020 Osias Carneiro. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol LoginBusinessLogic
{
  func doLogin(request: Login.Request)
  func fetchUser() -> String?
}

protocol LoginDataStore
{
    var response: Login.Response? { get }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    
    var presenter: LoginPresentationLogic?
    private let worker: LoginWorker = LoginWorker()
    var userWorker: UserWorker = UserWorker(store: UserAPI(), localStore: KeychainUserStore())
  
    private var user: String = ""
    private var password: String = ""
    internal var response: Login.Response?
    
  // MARK: Do login
  
  func doLogin(request: Login.Request)
  {
    user = request.user
    password = request.password
    
    if worker.validateUser(user), worker.validatePassword(password) {
        userWorker.doLogin(user: user, password: password, completion: { [weak self] response in
            guard let userId = response.userAccount.userId,
                  let name = response.userAccount.name,
                  let agency = response.userAccount.agency,
                  let account = response.userAccount.bankAccount,
                  let balance = response.userAccount.balance else {
                let error = Login.Error(message: response.error.message ?? "There was an error in login, please try again")
                self?.presenter?.error(error: error)
                return
            }
            let response = Login.Response(id: userId, name: name, agency: agency, account: account, balance: balance)
            self?.userWorker.storeUsername(user: self?.user ?? "")
            self?.response = response
            self?.presenter?.loginSucess(response: response)
        })
    } else {
        self.presenter?.error(error: Login.Error(message: "Invalid user/password"))
    }
  }
    
  func fetchUser() -> String? {
    return userWorker.getUser()
  }
}
