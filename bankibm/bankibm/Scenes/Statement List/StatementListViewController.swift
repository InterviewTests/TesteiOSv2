//
//  StatementListViewController.swift
//  bankibm
//
//  Created by Alexandre Furquim on 02/11/18.
//  Copyright (c) 2018 Alexandre Furquim. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementListDisplayLogic: class {
    func displaySomething(viewModel: StatementList.Something.ViewModel)
    func displayUserAccount(viewModel: StatementList.GetUserAccount.ViewModel)
    func displayHomeData(viewModel: StatementList.FetchRegisters.ViewModel)
    
}

class StatementListViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, StatementListDisplayLogic {
    
    var interactor: StatementListBusinessLogic?
    var router: (NSObjectProtocol & StatementListRoutingLogic & StatementListDataPassing)?
    
    var userId = ""
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = StatementListInteractor()
        let presenter = StatementListPresenter()
        let router = StatementListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doSomething()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupLayout()
        getUserInfo()
        fetchRegisters()
    }
    
    override var preferredStatusBarStyle : UIStatusBarStyle {
        return .lightContent
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething() {
        let request = StatementList.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: StatementList.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func setupLayout(){
        //Self
        self.view.backgroundColor = UIColor.white
        //Navigation Controller
        self.navigationController?.interactivePopGestureRecognizer?.isEnabled = false
        self.navigationController?.setNavigationBarHidden(true, animated: true)
        self.view.backgroundColor = ToolBox.Graphic.colorWithHexString(string: "#FFFFFF")
                        
    }
    
    // MARK: Fetch registers
    
    var displayedRegisters = [StatementList.DisplayedRegister]()
    
    func fetchRegisters() {
        let request = StatementList.FetchRegisters.Request(userId: self.userId)
        interactor?.fetchRegisters(request: request)
    }
    
    func getUserInfo() {
        let request = StatementList.GetUserAccount.Request()
        interactor?.getUserInfo(request: request)
    }
    
    
    @IBOutlet weak var StatementTableView: UITableView!
    
    @IBOutlet weak var lblUserName: UILabel!
    @IBOutlet weak var lblAccount: UILabel!
    @IBOutlet weak var lblBalance: UILabel!
    
    func displayUserAccount(viewModel: StatementList.GetUserAccount.ViewModel) {
        let displayedUserAccount = viewModel.displayedUserAccount
        lblUserName.text = displayedUserAccount.name
        lblAccount.text = displayedUserAccount.bankAccount
        lblBalance.text = displayedUserAccount.balance
        self.userId = displayedUserAccount.userId!
    }
    
    
    func displayHomeData(viewModel: StatementList.FetchRegisters.ViewModel) {
        displayedRegisters = viewModel.displayedRegisters
        StatementTableView.reloadData()
    }
    @IBAction func logout(_ sender: Any) {
        _ = self.navigationController?.popViewController(animated: false)
    }
    
    // MARK: Table view
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedRegisters.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedRegister = displayedRegisters[indexPath.row]
        var cell = tableView.dequeueReusableCell(withIdentifier: "StatementCell") as? StatementCell
        if cell == nil {
            cell = UITableViewCell(style: .default, reuseIdentifier: "StatementCell") as? StatementCell
        }
        cell?.updateLayout()
        cell!.displayedRegister = displayedRegister
        return cell!
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        // TODO: Route to detail view
    }
    
    func tableView( _ tableView : UITableView,  titleForHeaderInSection section: Int)->String? {
        return "Recentes"
    }
    
}
