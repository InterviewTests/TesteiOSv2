//
//  AccountDetailViewController.swift
//  BankTest
//
//  Created by Jaber Vieira Da Silva Shamali on 05/04/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountDetailDisplayLogic: class{
  func displaySomething(viewModel: AccountDetail.Load.ViewModel)
}

class AccountDetailViewController: UIViewController, AccountDetailDisplayLogic, UITableViewDelegate, UITableViewDataSource{
    
  var interactor: AccountDetailBusinessLogic?
  var router: (NSObjectProtocol & AccountDetailRoutingLogic & AccountDetailDataPassing)?

    @IBOutlet weak var clienteLb: UILabel!
    // MARK: Object lifecycle
    @IBOutlet weak var contaLb: UILabel!
    @IBOutlet weak var saldoLb: UILabel!
    @IBOutlet weak var table: UITableView!
    @IBAction func logoutBtn(_ sender: Any) {
        dismiss(animated: true, completion: nil)

    }
    
    var list = [LancamentoConvert]()
    
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder){
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup(){
    let viewController = self
    let interactor = AccountDetailInteractor()
    let presenter = AccountDetailPresenter()
    let router = AccountDetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?){
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad(){
    super.viewDidLoad()
    table.delegate = self
    table.dataSource = self
    loadDataClient()
    doLoadInitialData()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    func doLoadInitialData(){
        let request = AccountDetail.Load.Request()
        interactor?.doLoad(request: request)
    }

    func displaySomething(viewModel: AccountDetail.Load.ViewModel){
        list = viewModel.statement
        table.reloadData()
    }
    
    func loadDataClient(){
        clienteLb.text = router?.dataStore?.clienteData.name
        contaLb.text = router?.dataStore?.clienteData.account
        saldoLb.text = router?.dataStore?.clienteData.balance
    }
    
    
    
    
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "LancamentoCell", for: indexPath) as! LancamentoCell

        cell.data.text = list[indexPath.section].date
        cell.valor.text = list[indexPath.section].value
        cell.descricao.text = list[indexPath.section].desc
        cell.titulo.text = list[indexPath.section].title

        
        return cell
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return list.count
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 12.0
    }

    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 12.0
    }
}
