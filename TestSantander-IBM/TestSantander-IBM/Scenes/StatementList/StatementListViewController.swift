//
//  StatementListViewController.swift
//  TestSantander-IBM
//
//  Created by Erika Albizzati on 26/10/18.
//  Copyright (c) 2018 Erika Albizzati. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import UIKit

protocol StatementListViewControllerInput {
    func displayStatements(viewModel: StatementListScene.GetStatements.ViewModel)
}

protocol StatementListViewControllerOutput {
    func getStatements(request: StatementListScene.GetStatements.Request, completionHandler: @escaping (Bool, String?) -> Void)
}

class StatementListViewController: UIViewController, StatementListViewControllerInput {
    
    var output: StatementListViewControllerOutput?
    var router: StatementListRouter?
    var statements: [StatementListScene.GetStatements.ViewModel.Statements] = []

    @IBOutlet weak var tableView: UITableView!
    
    struct cellIdentifiers {
        static let statementCell = "statementCell"
        static let accountCell = "accountCell"
    }

    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        StatementListConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        requestGetStatements()
        configureTableViewOnLoad()
    }
    
    // MARK: Requests
    func requestGetStatements(){
        var request = StatementListScene.GetStatements.Request()

        guard let dataDest = router?.dataDestination else {return}
        if dataDest.user == nil {
            dataDest.user = UserAccount(userId: 1)
            request.id = 1
        } else {
            request.id = dataDest.user.userId
        }
        performRequest(request: request)
    }
    
    func performRequest(request: StatementListScene.GetStatements.Request){
        output?.getStatements(request: request, completionHandler: { (succeed, err) in
            if !succeed {
                DispatchQueue.main.async {
                    self.handleError(err, request: request)
                }
            }
        })
    }
    
    func handleError(_ err: String?, request: StatementListScene.GetStatements.Request) {
        let alert = UIAlertController(title: "Ops", message: err, preferredStyle: .alert)
        let okAction = UIAlertAction(title: "Ok", style: .default, handler: nil)
        let tryAgain = UIAlertAction(title: "Try Again", style: UIAlertAction.Style.default) {
            UIAlertAction in
            self.performRequest(request: request)
        }
        alert.addAction(okAction)
        alert.addAction(tryAgain)
        present(alert, animated: true, completion: nil)
    }


    
    // MARK: Display logic
    func displayStatements(viewModel: StatementListScene.GetStatements.ViewModel) {
        self.statements = viewModel.statements
        
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
}

//This should be on configurator but for some reason storyboard doesn't detect ViewController's name if placed there
extension StatementListViewController: StatementListPresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router?.passDataToNextScene(for: segue)
    }
}

extension StatementListViewController: LogoutBtnDelegate{
    func logoutBtnTapped() {
        self.dismiss(animated: true, completion: nil)
    }
}
