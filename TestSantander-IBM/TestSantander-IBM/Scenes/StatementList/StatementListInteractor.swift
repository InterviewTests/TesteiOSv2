//
//  StatementListInteractor.swift
//  TestSantander-IBM
//
//  Created by Erika Albizzati on 26/10/18.
//  Copyright (c) 2018 Erika Albizzati. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates
import Foundation

protocol StatementListInteractorInput {
    func getStatements(request: StatementListScene.GetStatements.Request, completionHandler: @escaping (Bool, String?) -> Void)
}

protocol StatementListInteractorOutput {
    func presentStatements(response: StatementListScene.GetStatements.Response)
}

protocol StatementListDataSource {
    
}

protocol StatementListDataDestination {
    var user: UserAccount! { get set }
}

class StatementListInteractor: StatementListInteractorInput, StatementListDataSource, StatementListDataDestination {
    
    var output: StatementListInteractorOutput?
    var statements: [Statements] = []
    var user: UserAccount!
    var networkManager: NetworkManager!
    
    init(networkManager: NetworkManager) {
        self.networkManager = networkManager
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    // MARK: Business logic
    
    func getStatements(request: StatementListScene.GetStatements.Request, completionHandler: @escaping (Bool, String?) -> Void){
        networkManager.fetcStatementsData(req: request) { (api: ApiResponse?, err) in
            if err != nil {
                completionHandler(false, err)
            } else {

                guard let account = api?.statementList else {
                    completionHandler(false, "No Data")
                    return
                }
                for el in account {
                    self.statements.insert(el, at: 0)
                }

                let response = StatementListScene.GetStatements.Response(statements: account)
                self.output?.presentStatements(response: response)
                completionHandler(true, nil)
            }
        }
    }
}
