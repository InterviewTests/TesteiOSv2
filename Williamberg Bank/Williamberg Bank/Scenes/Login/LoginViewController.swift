//
//  LoginViewController.swift
//  Williamberg Bank
//
//  Created by padrao on 16/05/20.
//  Copyright (c) 2020 Williamberg. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Lottie

protocol LoginDisplayLogic: class
{
  func displayLoginResult(viewModel: Login.Login.ViewModel)
  func displayUserSaved(viewModel: Login.SavedUser.ViewModel)
}

class LoginViewController: UIViewController, UITextFieldDelegate, LoginDisplayLogic
{
  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
    
  override var preferredStatusBarStyle: UIStatusBarStyle{
    return .default
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
//  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
//  {
//    if let scene = segue.identifier {
//      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//      if let router = router, router.responds(to: selector) {
//        router.perform(selector, with: segue)
//      }
//    }
//  }
    
    //MARK: - IBOutlets
    @IBOutlet weak var loginButton: UIButton!
    @IBOutlet weak var userTextfield: UITextField!
    @IBOutlet weak var passwordTextfield: UITextField!
    @IBOutlet weak var loadingButtonView: AnimationView!
    
    var alterConstraintValue:CGFloat = 0
    @IBOutlet weak var loginContainerCenterConstraint: NSLayoutConstraint!
    
    let passwordImageViewContainer = UIView(frame: CGRect(x: 0, y: 0, width: 40, height: 30))
    let rightPasswordImageView = UIImageView()
    let openEyeImage = UIImage(named: "open_eye")
    let closeEyeImage = UIImage(named: "close_eye")
    
    
    //MARK: - IBActions
    @IBAction func loginButtonAction(_ sender: UIButton) {
        loginAction()
    }
  
  // MARK: - View lifecycle
    override func viewDidLoad()
  {
    super.viewDidLoad()
    setupViews()
    requestSavedUser()
  }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWasShown), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWasHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        NotificationCenter.default.removeObserver(self)
    }
    
    //MARK: - Auxiliar methods
    func setupViews(){
        let constants = Constants()
        loginButton.backgroundColor = constants.MAIN_PURPLE_COLOR
        loginButton.setTitleColor(UIColor.white, for: .normal)
        loginButton.clipsToBounds = true
        loginButton.layer.cornerRadius = 4
        
        userTextfield.delegate = self
        userTextfield.returnKeyType = .next
        passwordTextfield.delegate = self
        passwordTextfield.returnKeyType = .done
        passwordTextfield.rightView = passwordImageViewContainer
        passwordTextfield.rightViewMode = .unlessEditing
        
        rightPasswordImageView.image = openEyeImage
        rightPasswordImageView.tintColor = .black
        rightPasswordImageView.isUserInteractionEnabled = true
        let tapOnRightImageView = UITapGestureRecognizer(target: self, action: #selector(toggleSecurityTextEntryForPasswordTextfield))
        rightPasswordImageView.addGestureRecognizer(tapOnRightImageView)
        rightPasswordImageView.frame = CGRect(x: 0, y: 0, width: 30, height: 30)
        
        passwordImageViewContainer.addSubview(rightPasswordImageView)
        
        loadingButtonView.isHidden = true
        loadingButtonView.layer.cornerRadius = 4
        loadingButtonView.loopMode = .loop
        loadingButtonView.animation = Animation.named("loading_white")
        loadingButtonView.backgroundColor = constants.MAIN_PURPLE_COLOR
        
        hideKeyboardWhenTappedOut()
    }
    
    @objc func keyboardWasShown(notification: NSNotification){
        if let info = notification.userInfo, let keyboardRect = info[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect{
            if passwordTextfield.superview!.frame.maxY > keyboardRect.minY{
                alterConstraintValue = passwordTextfield.superview!.frame.maxY - keyboardRect.minY
                loginContainerCenterConstraint.constant -= alterConstraintValue
                UIView.animate(withDuration: 0.5, animations: {
                    self.view.layoutIfNeeded()
                })
            }
        }
    }
    
    @objc func keyboardWasHide(notification: NSNotification){
        loginContainerCenterConstraint.constant += alterConstraintValue
        UIView.animate(withDuration: 0.5, animations: {
            self.view.layoutIfNeeded()
        })
        alterConstraintValue = 0
    }
    
    func showAnimationForLoginButton(){
        loadingButtonView.isHidden = false
        loadingButtonView.play()
    }
    
    func hideAnimationForLoginButton(){
        loadingButtonView.isHidden = true
        loadingButtonView.stop()
    }
    
    @objc func toggleSecurityTextEntryForPasswordTextfield(){
        if passwordTextfield.isSecureTextEntry{
            rightPasswordImageView.image = closeEyeImage
        }
        else{
            rightPasswordImageView.image = openEyeImage
        }
        passwordTextfield.isSecureTextEntry = !passwordTextfield.isSecureTextEntry
    }
    
    //MARK: - UITextFieldDelegate
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == userTextfield{
            passwordTextfield.becomeFirstResponder()
        }
        if textField == passwordTextfield{
            loginAction()
            textField.resignFirstResponder()
        }
        return true
    }
    
  
  // MARK: User Saved
  func requestSavedUser()
  {
    let request = Login.SavedUser.Request()
    interactor?.getSavedUser(request: request)
  }
    
  func displayUserSaved(viewModel: Login.SavedUser.ViewModel) {
    userTextfield.text = viewModel.user
    passwordTextfield.text = viewModel.password
  }
    
 
  //MARK: - Login
  func displayLoginResult(viewModel: Login.Login.ViewModel)
  {
    hideAnimationForLoginButton()
    if let _ = viewModel.userAccount{
        router?.routeToStatementsList(segue:nil)
    }
    else{
        let alert = UIAlertController(title: "Atenção", message: viewModel.errorMessage, preferredStyle: .alert)
        let okAction = UIAlertAction(title: "OK", style: .default, handler: nil)
        alert.addAction(okAction)
        self.present(alert, animated: true, completion: nil)
    }
  }
    
    func loginAction(){
        showAnimationForLoginButton()
        let request = Login.Login.Request(user: userTextfield.text, password: passwordTextfield.text)
        interactor?.login(request: request)
    }
}
