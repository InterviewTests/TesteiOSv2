//
//  LoginInteractor.swift
//  Williamberg Bank
//
//  Created by padrao on 16/05/20.
//  Copyright (c) 2020 Williamberg. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
  func login(request: Login.Login.Request)
  func getSavedUser(request: Login.SavedUser.Request)
}

protocol LoginDataStore
{
  var userAccount: UserAccount? { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
  var presenter: LoginPresentationLogic?
  var worker: LoginWorker?
  var userAccount: UserAccount?
  
  // MARK: Login
  func login(request: Login.Login.Request)
  {
    worker = LoginWorker()
    do{
        try worker?.validateUser(user: request.user)
        try worker?.validadePassword(password: request.password)
        worker?.login(user: request.user!, password: request.password!, completionHandler: {
            [weak self] (userAccount, msgErro)  in
            let _ = self?.worker?.saveUserOnKeychain(user: request.user!, password: request.password!)
            
            self?.userAccount = userAccount
            let response = Login.Login.Response(userAccount: userAccount, errorMessage: msgErro)
            self?.presenter?.presentLoginResult(response: response)
        })
    }
    catch{
        let response = Login.Login.Response(userAccount: nil, errorMessage: error.localizedDescription)
        presenter?.presentLoginResult(response: response)
    }
  }
    
    /// Request the user locally saved.
    /// - Parameter request: Login.SavedUser.Request
    func getSavedUser(request: Login.SavedUser.Request)
    {
      worker = LoginWorker()
      let userSaved = worker?.getUserOnKeychain()
      let passwordSaved = worker?.getUserPasswordOnKeychain()
      let response = Login.SavedUser.Response(user: userSaved, password: passwordSaved)
      presenter?.presentUserSaved(response: response)
    }
}
