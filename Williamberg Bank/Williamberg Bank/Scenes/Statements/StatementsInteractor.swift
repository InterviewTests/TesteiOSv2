//
//  StatementsInteractor.swift
//  Williamberg Bank
//
//  Created by padrao on 23/05/20.
//  Copyright (c) 2020 Williamberg. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementsBusinessLogic
{
    func loadUserAccount(request: Statements.LoadUserAccount.Request)
    func loadStatements(request: Statements.LoadStatements.Request)
}

protocol StatementsDataStore
{
  var userAccount: UserAccount? { get set }
  var statements: [Statements]? { get set }
}

class StatementsInteractor: StatementsBusinessLogic, StatementsDataStore
{
  var presenter: StatementsPresentationLogic?
  var worker = StatementsWorker()
  var userAccount: UserAccount?
  var statements: [Statements]?
  
  // MARK: Do something
  
    func loadUserAccount(request: Statements.LoadUserAccount.Request)
  {
    let response = Statements.LoadUserAccount.Response(userAccount: userAccount)
    presenter?.presentUserAccount(response: response)
  }
    
  func loadStatements(request: Statements.LoadStatements.Request)
  {
    if let userId = userAccount?.userId{
        worker.fetchStatements(userId: userId, completionHandler: {
            [weak self] statements, errorMessage in
            let response = Statements.LoadStatements.Response(statements: statements, errorMessage: errorMessage)
            self?.presenter?.presentFetchedStatements(response: response)
        })
    }
    else{
        let response = Statements.LoadStatements.Response(statements: [Statement](), errorMessage: "User Id inv√°lido.")
        presenter?.presentFetchedStatements(response: response)
    }
  }
}
