//
//  StatementsViewController.swift
//  BankApp-Desafio
//
//  Created by Mizia Lima on 2/26/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementsDisplayLogic: class {
    func displayStatements(viewModel: Statements.StatementViewModel)
    func showStatementFailureAlert(title: String, message: String)
}

class StatementsViewController: UIViewController, StatementsDisplayLogic {
    
    //MARK: Properties
    var interactor: StatementsBusinessLogic?
    var router: (NSObjectProtocol & StatementsRoutingLogic & StatementsDataPassing)?
    var headerView: StatementHeaderView?
    var viewModel: Statements.StatementViewModel = Statements.StatementViewModel(statements: [])
    private let user: UserAccount
    
    lazy var tableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .grouped)
        tableView.estimatedRowHeight = UITableView.automaticDimension
        tableView.separatorStyle = .none
        tableView.allowsSelection = false
        tableView.backgroundColor = .secondaryWhite()
        tableView.delegate = self
        tableView.dataSource = self
        return tableView
    }()
    
    private let sections = "Recentes"
        
    // MARK: Object lifecycle
    init(user: UserAccount) {
        self.user = user
        super.init(nibName: nil, bundle: nil)
        setup()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let presenter = StatementsPresenter()
        let router = StatementsRouter()
        let interactor = StatementsInteractor()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        interactor.user = router.dataStore?.user
        self.headerView = StatementHeaderView()
        headerView?.delegate = self
        setupViewHierarchy()
        setupConstraints()
        registerCell()
    }
    
    func setupViewHierarchy(){
        view.addSubview(tableView)
    }
    
    func setupConstraints(){
        tableView.contraintAllEdges(to: view)
    }
    
    func registerCell(){
        tableView.register(StatementsTableViewCell.self, forCellReuseIdentifier: "statementsCell")
    }
        
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.configureHeader()
        interactor?.showStatements()
    }
    
    private func configureHeader() {
        self.headerView?.configure(with: self.user)
    }
            
    func displayStatements(viewModel: Statements.StatementViewModel) {
        self.viewModel = viewModel
        self.tableView.reloadData()
    }
    
    func showStatementFailureAlert(title: String, message: String) {
        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let alertAction = UIAlertAction(title: "OK", style: .default, handler: nil)
        alertController.addAction(alertAction)
        showDetailViewController(alertController, sender: nil)
    }
}

//MARK: Extensions
extension StatementsViewController: StatementHeaderViewDelegate {
    func didTapLogout() {
        router?.logoff()
    }
}

extension StatementsViewController: UITableViewDelegate { }

extension StatementsViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewModel.statements.count
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "statementsCell", for: indexPath) as? StatementsTableViewCell else {
            return UITableViewCell()
        }
        let viewModelData = viewModel.statements[indexPath.row]
        cell.configure(with: viewModelData)

        return cell
    }
//
//    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
//        return sections.lowercased()
//    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        return self.headerView
     }

    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        let heightHeader: CGFloat = 230.0
        return heightHeader
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 160
    }
}
