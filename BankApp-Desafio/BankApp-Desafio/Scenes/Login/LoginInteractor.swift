//
//  LoginInteractor.swift
//  BankApp-Desafio
//
//  Created by Mizia Lima on 2/26/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
    func login(username: String?, password: String?)
    func getLastUser()
    
}

protocol LoginDataStore {
    var user: UserAccount? { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    var user: UserAccount?
    
    init(worker: LoginWorker = LoginWorker()) {
        self.worker = worker
    }
    
    //MARK: Interactor
    func login(username: String?, password: String?) {
        presenter?.loadingUser()
        guard let username = username,
              let password = password
        else {
            presenter?.presentErrorMessage(message: "Campos de usuário ou senha não preenchidos.")
            return
        }
        let request = Login.Request(user: username, password: password)
        
        guard isValidUser(user: request.user) else {
            presenter?.presentErrorMessage(message: "Preencha seu usuário com E-mail ou CPF.")
            return
        }
        
        guard isValidPassword(password: request.password) else {
            presenter?.presentErrorMessage(message: "Sua senha deve conter pelo menos 1 caractere alfanumérico, 1 caractere especial e 1 letra maiúscula.")
            return
        }
        
        worker?.login(username: request.user, password: request.password, completion: { [weak self] (result) in
            switch result {
            case let .success(response):
                self?.user = response.user.userAccount
                self?.presenter?.presentLoginUser(response: response)
            case let .failure(error):
                self?.presenter?.presentErrorMessage(message: error.localizedDescription)
            }
        })
    }
    
    //MARK: Validation
    private func isValidUser(user: String) -> Bool {
        return user.isValidCPF || user.isValidEmail
    }
    
    private func isValidPassword(password: String) -> Bool {
        return password.isValidPassword
    }
    
    //MARK: Keychain
    func getLastUser() {
        guard let loginCredentials = worker?.getLastUser() else {
            return
        }
        presenter?.getLastUserLogged(user: loginCredentials.user, password: loginCredentials.password)
    }
}
