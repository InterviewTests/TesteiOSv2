//
//  LoginInteractor.swift
//  BankApp-Desafio
//
//  Created by Mizia Lima on 2/26/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
    func login(with username: String?, password: String?)
}

protocol LoginDataStore {
    //var name: String { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    
    init(worker: LoginWorker = LoginWorker()) {
        self.worker = worker
    }
    
    func login(with username: String?, password: String?) {
        guard let username = username, let password = password
        else {
            presenter?.presentErrorMessage(message: "Campos de usuário ou senha inválidos")
            return
        }
        
        if isValidPassword(password: password) {
            worker?.login(username: username, password: password, completion: { [weak self] (result) in
                switch result {
                case let .success(response):
                    self?.presenter?.presentLoginUser(response: response)
                    print("### RESULTADO DO REQUEST ### =  \(response.user)" )
                case let .failure(error):
                    self?.presenter?.presentErrorMessage(message: error.localizedDescription)
                    print("### RESULTADO DO REQUEST ### = \(error.localizedDescription)")
                }
            })
        } else {
            presenter?.presentErrorMessage(message: "Senha inválida, utilize pelo menos 1 caractere especial, 1 letra maiúscula e um caractere alfanumérico.")
        }
    }
    
    func isValidPassword(password: String) -> Bool {
        let capitalLetterRegEx  = ".*[A-Z]+.*"
        let texttest = NSPredicate(format:"SELF MATCHES %@", capitalLetterRegEx)
        guard texttest.evaluate(with: password) else { return false }
        
        let numberRegEx  = ".*[0-9]+.*"
        let texttest1 = NSPredicate(format:"SELF MATCHES %@", numberRegEx)
        guard texttest1.evaluate(with: password) else { return false }
        
        let specialCharacterRegEx  = ".*[!&^%$#@()/_*+-]+.*"
        let texttest2 = NSPredicate(format:"SELF MATCHES %@", specialCharacterRegEx)
        guard texttest2.evaluate(with: password) else { return false }
        
        return true
    }
}
