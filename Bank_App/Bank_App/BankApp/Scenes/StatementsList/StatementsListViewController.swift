//
//  StatementsListViewController.swift
//  Bank_App
//
//  Created by apple on 21/03/20.
//  Copyright (c) 2020 Barbara_Aniele. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementsListDisplayLogic: class {
  func displayError(_ message: String?)
}

class StatementsListViewController: UIViewController, StatementsListDisplayLogic {
  
  var interactor: StatementsListBusinessLogic?
  var router: (NSObjectProtocol & StatementsListRoutingLogic & StatementsListDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = StatementsListInteractor()
    let presenter = StatementsListPresenter()
    let router = StatementsListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    preencherDados()
  }
  
  // MARK: Preencher Dados
  
  @IBOutlet weak var nomeLabel: UILabel!
  @IBOutlet weak var contaLabel: UILabel!
  @IBOutlet weak var saldoLabel: UILabel!
  
  func preencherDados() {
    if let dataStore = self.router?.dataStore, let userData = dataStore.userInfo {
      nomeLabel.text = userData.name
      saldoLabel.text = userData.balance?.formatCurrency(valor: userData.balance! as NSNumber)
      contaLabel.text = (userData.bankAccount ?? "") + " / " + (userData.agency ?? "")
    }
  }
  
  @IBAction func logoutTapped(_ sender: Any) {
    Keychain.removeValue(forKey: "userLogin")
    self.navigationController?.popToRootViewController(animated: true)
  }
  
  func displayError(_ message: String?) {
    hideActivityIndicator()
    showAlertErrorMessage(message: message ?? "Erro ao carregar lista")
  }
  
  func showActivityIndicator() {
    let activityIndicator:LoadingView = LoadingView(frame: CGRect(x: 0, y: 0, width: view.frame.width, height: view.frame.height))
    activityIndicator.tag = 10000
    self.view.addSubview(activityIndicator)
  }
  
  func hideActivityIndicator() {
    if let activityIndicator = self.view.viewWithTag(10000) {
      activityIndicator.removeFromSuperview()
    }
  }
}
