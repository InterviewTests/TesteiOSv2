//
//  LoginViewController.swift
//  TesteIOS
//
//  Created by khalid ait bellahs on 21/01/19.
//  Copyright (c) 2019 ti alto nivel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SVProgressHUD
import UIKit

protocol LoginDisplayLogic: class {
    func displayStatmentView()
    func showAlertMsg(title: String, message: String)
    func showLoading()
    func hideLoading()
}

class LoginViewController: UIViewController, LoginDisplayLogic {
    func showLoading() {
        SVProgressHUD.show()
    }

    func hideLoading() {
        SVProgressHUD.dismiss()
    }

    func showAlertMsg(title: String, message: String) {
        hideLoading()
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)

        alert.addAction(UIAlertAction(title: "Tentar novamente", style: .default, handler: nil))

        present(alert, animated: true)
    }

    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    var repository: UserRepository?

    
    
    lazy var mainView: UIView = {
        let mView = UIView()
        mView.translatesAutoresizingMaskIntoConstraints = false
        return mView
    }()
    lazy var loginLogo: UIImageView = {
        let image = UIImage(named: "Logo")
        var view = UIImageView(image: image)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    lazy var loginButton: UIButton = {
        var view = UIButton(type: .system)
        view.setTitle("Login", for: UIControl.State.normal)
        view.tintColor = UIColor(rgb: 0xffffff)
        view.backgroundColor = UIColor(rgb: 0x3B48EE)
        view.addTarget(self, action: #selector(self.LoginClick), for: .touchUpInside)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    lazy var inputsView: UIView = {
        var view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    lazy var userInput: UITextField = {
        var view = UITextField()
        view.placeholder = "User"
        view.setLeftPaddingPoints(10)
        view.setRightPaddingPoints(10)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    lazy var passwordInput: UITextField = {
        var view = UITextField()
        view.placeholder = "Password"
        view.setLeftPaddingPoints(10)
        view.setRightPaddingPoints(10)
        view.isSecureTextEntry = true
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    func activateConstraints(_ constraints: [NSLayoutConstraint]){
        NSLayoutConstraint.activate(constraints)
    }
    
    func mainViewConstraints(){
        view.addSubview(mainView)
        mainView.backgroundColor = .white
        if let view = view {
            let constraints = [mainView.topAnchor.constraint(equalTo: view.topAnchor),
                            mainView.leftAnchor.constraint(equalTo: view.leftAnchor),
                            mainView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
                            mainView.rightAnchor.constraint(equalTo: view.rightAnchor)]
            activateConstraints(constraints)
        }
    }
    
    func loginLogoConstraints(){
        mainView.addSubview(loginLogo)
        loginButton.layer.cornerRadius = 4.0
        let constraints = [loginLogo.topAnchor.constraint(equalTo: mainView.topAnchor, constant: 90),
                           loginLogo.centerXAnchor.constraint(equalTo: mainView.centerXAnchor),
                           loginLogo.heightAnchor.constraint(equalToConstant: 70),
                           loginLogo.widthAnchor.constraint(equalToConstant: 140)]
        activateConstraints(constraints)
    }
    
    func loginButtonConstraints(){
        mainView.addSubview(loginButton)
        let constraints = [loginButton.bottomAnchor.constraint(equalTo: mainView.bottomAnchor, constant: -90),
                           loginButton.centerXAnchor.constraint(equalTo: mainView.centerXAnchor),
                           loginButton.widthAnchor.constraint(equalToConstant: 190),
                           loginButton.heightAnchor.constraint(equalToConstant: 50)]
        activateConstraints(constraints)
    }
    
    func inputsViewConstraints(){
        mainView.addSubview(inputsView)
        let constraints = [inputsView.centerXAnchor.constraint(equalTo: mainView.centerXAnchor),
                           inputsView.centerYAnchor.constraint(equalTo: mainView.centerYAnchor),
                           inputsView.heightAnchor.constraint(equalToConstant: 130),
                           inputsView.widthAnchor.constraint(equalTo: mainView.widthAnchor, constant: -50)]
        activateConstraints(constraints)
    }
    
    func userInputConstraints(){
        inputsView.addSubview(userInput)
        userInput.layer.borderWidth = 1
        userInput.layer.cornerRadius = 4.0
        userInput.layer.borderColor = UIColor(red: 220, green: 226, blue: 238, alpha: 1).cgColor
        let constraints = [userInput.topAnchor.constraint(equalTo: inputsView.topAnchor),
                           userInput.centerXAnchor.constraint(equalTo: inputsView.centerXAnchor),
                           userInput.widthAnchor.constraint(equalTo: inputsView.widthAnchor),
                           userInput.heightAnchor.constraint(equalToConstant: 50)]
        activateConstraints(constraints)
    }
    
    func passwordInputConstraints(){
        inputsView.addSubview(passwordInput)
        passwordInput.layer.borderWidth = 1
        passwordInput.layer.cornerRadius = 4.0
        passwordInput.layer.borderColor = UIColor(red: 220, green: 226, blue: 238, alpha: 1).cgColor
        let constraints = [passwordInput.topAnchor.constraint(equalTo: userInput.bottomAnchor, constant: 30),
                           passwordInput.centerXAnchor.constraint(equalTo: inputsView.centerXAnchor),
                           passwordInput.widthAnchor.constraint(equalTo: inputsView.widthAnchor),
                           passwordInput.heightAnchor.constraint(equalToConstant: 50)]
        activateConstraints(constraints)
    }
    
    

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        let repository = UserRepository.shared
        viewController.interactor = interactor
        viewController.router = router
        viewController.repository = repository
        interactor.presenter = presenter
        interactor.repository = repository
        presenter.viewController = viewController
        presenter.repository = repository
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.endEditing(true)
        mainViewConstraints()
        loginLogoConstraints()
        loginButtonConstraints()
        inputsViewConstraints()
        userInputConstraints()
        passwordInputConstraints()
    }

    @objc func LoginClick(_ sender: Any) {
        doLogin()
    }

    func doLogin() {
        showLoading()
        let request = Login.doLogin.Request(user: userInput.text!, password: passwordInput.text!)
        interactor?.doLogin(request: request)
    }

    func displayStatmentView() {
        router?.goToStatments()
        hideLoading()
    }
}
