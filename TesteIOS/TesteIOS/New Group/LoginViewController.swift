//
//  LoginViewController.swift
//  TesteIOS
//
//  Created by khalid ait bellahs on 21/01/19.
//  Copyright (c) 2019 ti alto nivel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SVProgressHUD
import UIKit

protocol LoginDisplayLogic: class {
    func displayStatmentView()
    func showAlertMsg(title: String, message: String)
    func showLoading()
    func hideLoading()
}

class LoginViewController: UIViewController, LoginDisplayLogic {
    func showLoading() {
        SVProgressHUD.show()
    }

    func hideLoading() {
        SVProgressHUD.dismiss()
    }

    func showAlertMsg(title: String, message: String) {
        hideLoading()
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)

        alert.addAction(UIAlertAction(title: "Tentar novamente", style: .default, handler: nil))

        present(alert, animated: true)
    }

    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    var repository: UserRepository?

    @IBOutlet var loginButton: UIButton!
    @IBOutlet var userInput: UITextField!
    @IBOutlet var passwordInput: UITextField!

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        let repository = UserRepository.shared
        viewController.interactor = interactor
        viewController.router = router
        viewController.repository = repository
        interactor.presenter = presenter
        interactor.repository = repository
        presenter.viewController = viewController
        presenter.repository = repository
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.endEditing(true)
        loginButton.layer.cornerRadius = 4.0
        userInput.layer.borderWidth = 1
        userInput.layer.cornerRadius = 4.0
        userInput.layer.borderColor = UIColor(red: 220, green: 226, blue: 238, alpha: 1).cgColor
        passwordInput.layer.borderWidth = 1
        passwordInput.layer.cornerRadius = 4.0
        passwordInput.layer.borderColor = UIColor(red: 220, green: 226, blue: 238, alpha: 1).cgColor
    }

    @IBAction func LoginClick(_ sender: Any) {
        doLogin()
    }

    func doLogin() {
        showLoading()
        let request = Login.doLogin.Request(user: userInput.text!, password: passwordInput.text!)
        interactor?.doLogin(request: request)
    }

    func displayStatmentView() {
        router?.goToStatments()
        hideLoading()
    }
}
