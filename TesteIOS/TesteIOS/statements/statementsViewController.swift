//
//  statementsViewController.swift
//  TesteIOS
//
//  Created by khalid ait bellahs on 21/01/19.
//  Copyright (c) 2019 ti alto nivel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SVProgressHUD
import UIKit

protocol statementsDisplayLogic: class {
    func updateViews(viewModel: statements.get.ViewModel)
}

class statementsViewController: UIViewController, statementsDisplayLogic {
    var interactor: statementsBusinessLogic?
    var router: (NSObjectProtocol & statementsRoutingLogic & statementsDataPassing)?
    var repository: UserRepository?

    lazy var mainView: UIView = {
        var view = UIView()
        view.backgroundColor = UIColor(rgb: 0x3B49EE)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    lazy var logoutLogo: UIImageView = {
        let image = UIImage(named: "logout 2")
        var view = UIImageView(image: image)
        view.isUserInteractionEnabled = true
        let tapRecognizer = UITapGestureRecognizer(target: self, action: #selector(self.Logout))
        view.addGestureRecognizer(tapRecognizer)
        view.contentMode = .scaleAspectFit
        if view.bounds.size.width > (image?.size.width ?? 0.0) && view.bounds.size.height > (image?.size.height ?? 0.0) {
            view.contentMode = .scaleAspectFit
        }
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    lazy var userName: UILabel = {
        var view = UILabel()
        view.font = .systemFont(ofSize: 22)
        view.textColor = UIColor(rgb: 0xffffff)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    lazy var userAccountLabel: UILabel = {
        var view = UILabel()
        view.font = .systemFont(ofSize: 11)
        view.textColor = UIColor(rgb: 0xffffff)
        view.text = "Conta"
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    lazy var userAccount: UILabel = {
        var view = UILabel()
        view.font = .systemFont(ofSize: 20)
        view.textColor = UIColor(rgb: 0xffffff)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    lazy var userBalanceLabel: UILabel = {
        var view = UILabel()
        view.font = .systemFont(ofSize: 11)
        view.textColor = UIColor(rgb: 0xffffff)
        view.text = "Saldo"
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    lazy var userBalance: UILabel = {
        var view = UILabel()
        view.font = .systemFont(ofSize: 20)
        view.textColor = UIColor(rgb: 0xffffff)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    lazy var recentesLabel: UILabel = {
        var view = UILabel()
        view.text = "Recentes"
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    lazy var statmentsTable: UITableView = {
        var view = UITableView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    func activateConstraints(_ constraints: [NSLayoutConstraint]){
        NSLayoutConstraint.activate(constraints)
    }
    
    func mainViewConstraints(){
        view.addSubview(mainView)
        let constraints = [mainView.topAnchor.constraint(equalTo: view.topAnchor),
                           mainView.leftAnchor.constraint(equalTo: view.leftAnchor),
                           mainView.rightAnchor.constraint(equalTo: view.rightAnchor),
                           mainView.heightAnchor.constraint(equalToConstant: 250)]
        activateConstraints(constraints)
    }
    
    func logoutLogoConstraints(){
        mainView.addSubview(logoutLogo)
        let constraints = [logoutLogo.topAnchor.constraint(equalTo: mainView.topAnchor, constant: 60),
                           logoutLogo.rightAnchor.constraint(equalTo: mainView.rightAnchor, constant: -20)]
        activateConstraints(constraints)
    }
    
    func userNameConstraints(){
        mainView.addSubview(userName)
        let constraints = [userName.topAnchor.constraint(equalTo: mainView.topAnchor, constant: 60),
                           userName.leftAnchor.constraint(equalTo: mainView.leftAnchor, constant: 20)]
        activateConstraints(constraints)
    }
    
    func userAccountLabelConstraints(){
        mainView.addSubview(userAccountLabel)
        let constraints = [userAccountLabel.topAnchor.constraint(equalTo: userName.bottomAnchor, constant: 30),
                           userAccountLabel.leftAnchor.constraint(equalTo: mainView.leftAnchor, constant: 20)]
        activateConstraints(constraints)
    }
    
    func userAccountConstraints(){
        mainView.addSubview(userAccount)
        let constraints = [userAccount.topAnchor.constraint(equalTo: userAccountLabel.bottomAnchor, constant: 5),
                           userAccount.leftAnchor.constraint(equalTo: mainView.leftAnchor, constant: 20)]
        activateConstraints(constraints)
    }
    
    func userBalanceLabelConstraints(){
        mainView.addSubview(userBalanceLabel)
        let constraints = [userBalanceLabel.topAnchor.constraint(equalTo: userAccount.bottomAnchor, constant: 30),
                           userBalanceLabel.leftAnchor.constraint(equalTo: mainView.leftAnchor, constant: 20)]
        activateConstraints(constraints)
    }
    
    func userBalanceConstraints(){
        mainView.addSubview(userBalance)
        let constraints = [userBalance.topAnchor.constraint(equalTo: userBalanceLabel.bottomAnchor, constant: 5),
                           userBalance.leftAnchor.constraint(equalTo: mainView.leftAnchor, constant: 20)]
        activateConstraints(constraints)
    }
    
    func recentesLabelConstraints(){
        view.addSubview(recentesLabel)
        let constraints = [recentesLabel.topAnchor.constraint(equalTo: mainView.bottomAnchor, constant: 5),
                           recentesLabel.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 20)]
        activateConstraints(constraints)
    }
    
    func statmentsTableConstraints(){
        view.addSubview(statmentsTable)
        statmentsTable.register(StatmentViewCell.self, forCellReuseIdentifier: "StatmentViewCell")
        statmentsTable.dataSource = self
        statmentsTable.delegate = self
        let constraints = [statmentsTable.topAnchor.constraint(equalTo: recentesLabel.bottomAnchor, constant: 20),
                           statmentsTable.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 20),
                           statmentsTable.rightAnchor.constraint(equalTo: view.rightAnchor, constant: -20),
                           statmentsTable.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -20)]
        activateConstraints(constraints)
    }

    var statments: [Statment] = [] {
        didSet {
            //statmentsTable.reloadData()
            DispatchQueue.main.async{
                self.statmentsTable.reloadData()
            }
            print("statments.count: \(statments.count)")
        }
    }

    func showLoading() {
        SVProgressHUD.show()
    }

    func hideLoading() {
        SVProgressHUD.dismiss()
    }

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = statementsInteractor()
        let presenter = statementsPresenter()
        let router = statementsRouter()
        let repository = UserRepository.shared
        viewController.interactor = interactor
        viewController.router = router
        viewController.repository = repository
        interactor.presenter = presenter
        interactor.repository = repository
        presenter.viewController = viewController
        presenter.repository = repository
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        showLoading()
        view.backgroundColor = .white
        mainViewConstraints()
        logoutLogoConstraints()
        userNameConstraints()
        userAccountLabelConstraints()
        userAccountConstraints()
        userBalanceLabelConstraints()
        userBalanceConstraints()
        recentesLabelConstraints()
        statmentsTableConstraints()
        UpdateView()
    }

    // MARK: Do something

    // @IBOutlet weak var nameTextField: UITextField!

    func UpdateView() {
        interactor?.updateStatmentsList()
    }

    func updateViews(viewModel: statements.get.ViewModel) {
        let uAccount = viewModel.userAccount!
        statments = viewModel.statments!

        userName.text = uAccount.name!
        userAccount.text = uAccount.agency! + "/" + uAccount.bankAccount!
        userBalance.text = uAccount.balance!
        hideLoading()
    }

    // @IBAction func Logout(_ sender: Any) {
    //    repository?.deleteAll()
    // }
    @objc func Logout(_ sender: Any) {
        repository?.deleteAll()
        router?.goToLogin()
    }
}

extension statementsViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return statments.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let statment = statments[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: "StatmentViewCell") as! StatmentViewCell
        cell.SetStatment(statment: statment)
        return cell
    }
}
