//
//  AccountDetailsViewController.swift
//  santander-challenge
//
//  Created by Kevin Oliveira on 01/05/20.
//  Copyright (c) 2020 Kevin Oliveira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountDetailsDisplayLogic: class {
    func displayAccountInfo(viewModel: AccountDetails.AccountInfo.ViewModel)
    func displayStatements(viewModel: AccountDetails.ListStatements.ViewModel)
}

class AccountDetailsViewController: UIViewController, AccountDetailsDisplayLogic {
    var interactor: AccountDetailsBusinessLogic?
    var router: (NSObjectProtocol & AccountDetailsRoutingLogic & AccountDetailsDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = AccountDetailsInteractor()
        let presenter = AccountDetailsPresenter()
        let router = AccountDetailsRouter()
        let worker = AccountDetailsWorker()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = worker
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        setNeedsStatusBarAppearanceUpdate()

        showAccountInfo()
        listStatements()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setStatusBarColor()
    }

    override var preferredStatusBarStyle: UIStatusBarStyle {
        .lightContent
    }

    func setStatusBarColor() {
        UIApplication.statusBarColor = .darkBlue
    }

    // MARK: Account Info

    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var accountNumberLabel: UILabel!
    @IBOutlet weak var balanceLabel: UILabel!

    @IBAction func logoutButtonTapped(_ sender: Any) {
        router?.routeToLogin(segue: nil)
    }

    func showAccountInfo() {
        let request = AccountDetails.AccountInfo.Request()
        interactor?.showAccountInfo(request: request)
    }

    func displayAccountInfo(viewModel: AccountDetails.AccountInfo.ViewModel) {
        nameLabel.text = viewModel.name
        accountNumberLabel.text = viewModel.accountNumber
        balanceLabel.text = viewModel.balance
    }

    // MARK: Statements
    
    @IBOutlet weak var statementsTableView: UITableView!

    var statements: [AccountDetails.ListStatements.StatementViewModel]?

    func listStatements() {
        let request = AccountDetails.ListStatements.Request()
        interactor?.listStatements(request: request)
    }

    func displayStatements(viewModel: AccountDetails.ListStatements.ViewModel) {
        if (viewModel.success) {
            statements = viewModel.statements
            statementsTableView.reloadData()
        } else {
            let alert = UIAlertController(
                title: "Ops!",
                message: "Não foi possível listar suas transações mais recentes. Por favor tente novamente mais tarde.",
                preferredStyle: .alert
            )

            alert.addAction(UIAlertAction(title: "OK", style: .default))
            self.present(alert, animated: true, completion: nil)
        }
    }
}

// MARK: TableViewDataSource

extension AccountDetailsViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return statements?.count ?? 0
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "StatementTableViewCell", for: indexPath) as? StatementTableViewCell, let statement = statements?[indexPath.row] else {
            return StatementTableViewCell()
        }

        cell.titleLabel.text = statement.title
        cell.descriptionLabel.text = statement.description
        cell.dateLabel.text = statement.date
        cell.valueLabel.text = statement.value

        return cell
    }
}

// MARK: TableViewDelegate

extension AccountDetailsViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 96
    }
}
