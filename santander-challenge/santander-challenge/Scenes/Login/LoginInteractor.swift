//
//  LoginInteractor.swift
//  santander-challenge
//
//  Created by Kevin Oliveira on 01/05/20.
//  Copyright (c) 2020 Kevin Oliveira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
    func getUser(request: Login.GetUser.Request)
    func login(request: Login.Login.Request)
}

protocol LoginDataStore {
    var user: User? { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    var presenter: LoginPresentationLogic?
    var worker: LoginWorkerLogic?
    var userWorker: UserWorkerLogic?
    var user: User?

    // MARK: Get User

    func getUser(request: Login.GetUser.Request) {
        let user = userWorker?.getUser()
        let response = Login.GetUser.Response(user: user)
        presenter?.presentUser(response: response)
    }

    // MARK: Login

    func login(request: Login.Login.Request) {
        guard let user = request.user, let password = request.password else {
            let errorMessage = "Não foi possível efetuar o seu login. Por favor verifique se seu usuário e senha estão corretos e tente novamente."
            let response = Login.Login.Response(success: false, errorMessage: errorMessage)
            self.presenter?.presentLogin(response: response)
            return
        }

        if (!validateUser(user)) {
            let errorMessage = "Por favor informe um email ou CPF válido no campo de usuário."
            let response = Login.Login.Response(success: false, errorMessage: errorMessage)
            self.presenter?.presentLogin(response: response)
            return
        }

        if (!validatePassword(password)) {
            let errorMessage = "Por favor informe uma senha que contenha pelo menos uma letra maiúscula, um caracter especial e um caracter alfanumérico."
            let response = Login.Login.Response(success: false, errorMessage: errorMessage)
            self.presenter?.presentLogin(response: response)
            return
        }

        worker?.login(user: user, password: password, { (user, error) in
            guard let user = user, error == nil else {
                let errorMessage = "Não foi possível efetuar o seu login. Por favor verifique se seu usuário e senha estão corretos e tente novamente."
                let response = Login.Login.Response(success: false, errorMessage: errorMessage)
                self.presenter?.presentLogin(response: response)
                return
            }

            self.userWorker?.saveUser(request.user)
            self.user = user

            let response = Login.Login.Response(success: true, errorMessage: nil)
            self.presenter?.presentLogin(response: response)
        })
    }

    func validateUser(_ user: String) -> Bool {
        return user.isEmail || user.isCPF
    }

    func validatePassword(_ password: String) -> Bool {
        let regex = #"^(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]).{3,}"#
        let predicate = NSPredicate(format:"SELF MATCHES %@", regex)
        return predicate.evaluate(with: password)
    }
}
