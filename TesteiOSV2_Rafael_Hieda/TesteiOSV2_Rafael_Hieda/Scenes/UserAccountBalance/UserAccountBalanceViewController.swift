//
//  UserAccountBalanceViewController.swift
//  TesteiOSV2_Rafael_Hieda
//
//  Created by Rafael  Hieda on 10/29/18.
//  Copyright (c) 2018 Rafael Hieda. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UserAccountBalanceDisplayLogic: class
{
  func displaySomething(viewModel: UserAccountBalance.Something.ViewModel)
}

class UserAccountBalanceViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, UserAccountBalanceDisplayLogic
{
  var interactor: UserAccountBalanceBusinessLogic?
  var router: (NSObjectProtocol & UserAccountBalanceRoutingLogic & UserAccountBalanceDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = UserAccountBalanceInteractor()
    let presenter = UserAccountBalancePresenter()
    let router = UserAccountBalanceRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
    
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    viewControllerSetup()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = UserAccountBalance.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: UserAccountBalance.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
    //MARK : ViewController Events and outlets

    @IBOutlet weak var tableView: UITableView!
    
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        //return (accountBalance?.statementList?.count)!
        return 8
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "RegistryCell", for: indexPath) as! RegistryTableViewCell
        
        
//        let registry : Registry = (accountBalance?.statementList![indexPath.row])!
        
//        cell.dataTextField.text = registry.title
//        cell.descricaoTextField.text = registry.description
//        cell.dataTextField.text = registry.date
//        cell.pagamentoTextField.text = "R$ \(String(describing: registry.value))"
        
        cell.dataTextField.text = "20/10/2012"
        cell.descricaoTextField.text = "Refeição"
        cell.pagamentoTextField.text = "R$ 1.400,00"

        return cell
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return "Recentes"
    }
    
    func viewControllerSetup()
    {
        self.tableView.dataSource = self
        self.tableView.delegate = self
        self.tableView.register(UINib.init(nibName: "RegistryCell", bundle:nil), forCellReuseIdentifier: "RegistryCell")
    }
    
    @IBOutlet weak var nameTextField: UILabel!
    @IBOutlet weak var contaTextField: UILabel!
    @IBOutlet weak var SaldoTextField: UILabel!
    public var userAccount : UserAccount?
    var accountBalance : AccountBalance?
    
    func loadRegistry(accountBalance : AccountBalance)
    {
        self.accountBalance = accountBalance
    }
    
}
