//
//  ListStatementViewControllerTests.swift
//  BankApp
//
//  Created by Lynneker Souza on 5/31/20.
//  Copyright (c) 2020 Lynneker Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import BankApp
import XCTest

class ListStatementViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListStatementViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupListStatementViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListStatementViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "ListStatementViewController") as? ListStatementViewController
        XCTAssertNotNil(sut, "Should not be null")
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class ListStatementBusinessLogicSpy: ListStatementBusinessLogic
    {
        
        var fetchUserAccount = false
        var fetchStatementCalled = false
        
        func fetchStatement(request: ListStatement.FetchStatement.Request) {
            fetchStatementCalled = true
        }
        
        func fetchUserAccount(request: ListStatement.UserAccountInfo.Request) {
            fetchUserAccount = true
        }
    }
    
    // MARK: Tests
    
    func testShouldFetchStatementWhenViewIsLoaded()
    {
        // Given
        let spy = ListStatementBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.fetchStatementCalled, "viewDidLoad() should ask the interactor to fetchStatementCalled")
    }
    
    func testShouldFetchUserAccountWhenViewIsLoaded()
    {
        // Given
        let spy = ListStatementBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.fetchUserAccount, "viewDidLoad() should ask the interactor to fetchUserAccount")
    }
    
}
