//
//  AccountStatmentsViewController.swift
//  cleanSwiftProject
//
//  Created by santosw ios samel on 01/05/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountStatmentsDisplayLogic: AnyObject {
    func displayUserAccountInfo(viewModel: AccountStatments.UserAccountDescriptionData.ViewModel)
    func showStatements(viewModel: AccountStatments.ShowStatements.ViewModel)
    func showErrorAlert(viewModel: AccountStatments.ShowStatements.ViewModel)
}

class AccountStatmentsViewController: UIViewController, AccountStatmentsDisplayLogic {
    
    
    @IBOutlet weak var userNameLl: UILabel!
    @IBOutlet weak var userAccountLl: UILabel!
    @IBOutlet weak var balancel: UILabel!
    @IBOutlet weak var tableView: UITableView!
    
    var interactor: AccountStatmentsBusinessLogic?
    var router: (NSObjectProtocol & AccountStatmentsRoutingLogic & AccountStatmentsDataPassing)?
    var statements: [Statement] = []
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
        
    private func setup() {
        let viewController = self
        let interactor = AccountStatmentsInteractor()
        let presenter = AccountStatmentsPresenter()
        let router = AccountStatmentsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    @IBAction func exitButtonPressed(_ button: UIButton) {
        router?.dismissScreen()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.configureTableView()
    }
    
    private func configureTableView() {
        self.tableView.register(UINib(nibName: "AccountStatementsCell", bundle: nil),
                                forCellReuseIdentifier: "StatesTableViewCell")
        self.tableView.dataSource = self
        self.tableView.delegate = self
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.hideNavigationBar()
    }
    
    func hideNavigationBar(){
        self.navigationController?.setNavigationBarHidden(true, animated: false)
    }
    func displayUserAccountInfo(viewModel: AccountStatments.UserAccountDescriptionData.ViewModel) {
        self.userNameLl.text = viewModel.fields.name
        self.userAccountLl.text = viewModel.fields.accountWithAgency
        self.balancel.text = viewModel.fields.balance
    }
    
    func showStatements(viewModel: AccountStatments.ShowStatements.ViewModel) {
        if let statements = viewModel.statements {
            self.statements = statements
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        }
    }
    
    func showErrorAlert(viewModel: AccountStatments.ShowStatements.ViewModel) {
        let errorMessage = viewModel.error!.message
        let alertController = UIAlertController(title: "Algo deu errado..",
                                                message: errorMessage, preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: "Tudo bem", style: .default, handler: nil))
        self.present(alertController, animated: true)
    }
}


extension AccountStatmentsViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return self.statements.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: "StatesTableViewCell") as? AccountStatmentsCell {
            
            let currentStatement = self.statements[indexPath.section]
            cell.titleLb.text = currentStatement.title
            cell.descriptionLb.text = currentStatement.description
            cell.dateLb.text = currentStatement.date
            cell.valueLb.text = currentStatement.totalAmount
            
            return cell
        }
        
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return CGFloat(16)
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView = UIView()
        headerView.backgroundColor = UIColor.clear
        return headerView
    }
}

