//
//  AccountStatmentsPresenter.swift
//  cleanSwiftProject
//
//  Created by santosw ios samel on 01/05/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountStatmentsPresentationLogic {
    func presentUserInfoData(response: AccountStatments.UserAccountDescriptionData.Response)
    func presentStatementData(response: AccountStatments.ShowStatements.Response)
}

class AccountStatmentsPresenter: AccountStatmentsPresentationLogic {
    weak var viewController: AccountStatmentsDisplayLogic?
    
    func presentUserInfoData(response: AccountStatments.UserAccountDescriptionData.Response) {
        if let userAccount = response.userAccount {
            let name = userAccount.name!
            let accountAgency = self.accountWithAgencyString(account: userAccount.bankAccount!,
                                                             agency: userAccount.agency!)
            let balance = self.createBalanceString(balance: userAccount.balance!)
            let labels = AccountStatments.UserAccountDescriptionFields(name: name,
                                                                       accountWithAgency: accountAgency,
                                                                       balance: balance)
            let viewModel = AccountStatments.UserAccountDescriptionData.ViewModel(fields: labels)
            viewController?.displayUserAccountInfo(viewModel: viewModel)
        }
    }
    
    func accountWithAgencyString(account: String, agency: String) -> String {
        let getAccountData = agency
        let getAgencyData = account
        
        let accountPrefix = getAccountData.prefix(2)
        let accountMiddle = getAccountData.suffix(7).prefix(6)
        let accountDigit = getAccountData.suffix(1)
        
        return "\(getAgencyData) / \(accountPrefix).\(accountMiddle)-\(accountDigit)"
    }
    
    func createBalanceString(balance: Double) -> String {
        return self.brazilianCurrencyFormatted(in: balance)
    }
    
    func presentStatementData(response: AccountStatments.ShowStatements.Response) {
        if let statementDataArray = response.statementDataArray {
            var statementsArray: [Statement] = []
            
            for statementData in statementDataArray {
                let getCreateStatement = self.createStatemented(from: statementData)
                
                statementsArray.append(getCreateStatement)
            }
            
            let viewModel = AccountStatments.ShowStatements.ViewModel(statements: statementsArray, error: nil)
            viewController?.showStatements(viewModel: viewModel)
            
        } else if let e = response.error {
            let error = UserDataErrorMessage(code: e.code!, message: e.message!)
            
            let viewModel = AccountStatments.ShowStatements.ViewModel(statements: nil, error: error)
            viewController?.showErrorAlert(viewModel: viewModel)
        }
    }
    
    func formattedDate(_ oldDate: String) -> String {
        let year = oldDate.prefix(4)
        let month = oldDate.prefix(7).suffix(2)
        let day = oldDate.suffix(2)
        let dateConvertedString = "\(day)/\(month)/\(year)"
        
        return dateConvertedString
    }
    
    func brazilianCurrencyFormatted(in doubleValue: Double) -> String {
        let numberBr = NumberFormatter()
        numberBr.numberStyle = .currency
        numberBr.usesGroupingSeparator = true
        numberBr.locale = Locale(identifier: "pt_BR")
        
        let numbers = NSNumber(value: doubleValue)
        let balanceBRString = numberBr.string(from: numbers)!.replacingOccurrences(of: " ", with: "")
        
        return balanceBRString
    }
    
    func formatCurrencyValue(_ oldAmountValue: Double) -> String {
        return brazilianCurrencyFormatted(in: oldAmountValue)
    }
    
    func createStatemented(from statementData: AccountStamentsList.StatementData) -> Statement {
        let title = statementData.title!
        let description = statementData.description!
        let date = self.formattedDate(statementData.date!)
        let totalAmount = self.formatCurrencyValue(statementData.totalAmount!)
        
        return Statement(title: title, description: description, date: date, totalAmount: totalAmount)
    }
}
