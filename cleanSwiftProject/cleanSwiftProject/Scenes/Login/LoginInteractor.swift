//
//  LoginInteractor.swift
//  cleanSwiftProject
//
//  Created by santosw ios samel on 01/05/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
  func doLogin(request: Login.Login.Request)
  func fetchLastLoggedUsername(request: Login.FetchLastLoggedUser.Request)

}

protocol LoginDataStore {
    var loginUserAccountData:UserAccountData! {get set}
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
  var presenter: LoginPresentationLogic?
  var worker: LoginWorker?
    
  //var name: String = ""
  
    var userAccount: UserAccountData!
            
    }
        
    /// Delegates the validation for the `LoginFieldsValidationWorker` object.
    /// - Parameter user: the `User` object which has `username` and `password` properties.
    /// - Returns: `true` if the fields satisfies the preconditions; false if `username`, `password` or both does not satisfy the preconditions.
    private func validateFields(of user: User) -> Bool {
        fieldsValidationWorker = LoginFieldsValidationWorker()
        return fieldsValidationWorker.validate(user: user)
    }
    
    
    /// Fetch the last logged username logged in
    /// - Parameter request: an empty request (as hook, for later implementation)
    func fetchLastLoggedUsername(request: Login.FetchLastLoggedUser.Request) {
        loginStorageWorker = LoginStorageWorker(storage: UserDefaultsStorage())
        let lastUsername = loginStorageWorker.fetchLastLoggedUsername()
        
        let response = Login.FetchLastLoggedUser.Response(username: lastUsername)
        presenter.presentLastLoggedUser(response: response)
    }
}
