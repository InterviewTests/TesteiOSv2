//
//  LoginViewController.swift
//  BankApp
//
//  Created by Victor Lisboa on 20/09/19.
//  Copyright (c) 2019 Victor Lisboa. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func presentExtrato()
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    func createErrorAlert(message: String) {
        let alert = UIAlertController(title: "Atenção ⚠", message: message, preferredStyle: .alert)
        let alertAction = UIAlertAction(title: "OK", style: .default, handler: nil)
        alert.addAction(alertAction)
        present(alert, animated: true, completion: nil)
    }
    
    // MARK: Routing
    
    func presentExtrato() {
        performSegue(withIdentifier: "Extrato", sender: nil)
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
            router?.routeToSomewhere(segue: segue)
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        userTextField.text = ""
        passwordTextField.text = ""
    }
    
    // MARK: Do something
    
    @IBOutlet weak var userTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var buttonLogin: UIButton!
    
    func executeLogin()
    {
        let user = userTextField.text ?? ""
        let password = passwordTextField.text ?? ""
        
        if user.isEmpty {
            createErrorAlert(message: "Usuário vazio!")
            userTextField.becomeFirstResponder()
            return
        }
        else if password.isEmpty  {
            createErrorAlert(message: "Senha vazia!")
            passwordTextField.becomeFirstResponder()
            return
        }
        else if !(user.isEmail()) && !(user.isCPF()) {
            createErrorAlert(message: "E-mail ou CPF inválido!")
            userTextField.becomeFirstResponder()
            return
        }
        else if !password.validaSenha() {
            createErrorAlert(message: "Senha inválida!")
            passwordTextField.becomeFirstResponder()
            return
        }
        var request = Login.Something.Request()
        request.user = userTextField.text ?? ""
        request.password = passwordTextField.text ?? ""
        interactor?.doLogin(request: request)
    }
    
    @IBAction func loginAction(_ sender: Any) {
        executeLogin()
    }
}
