//
//  LoginInteractor.swift
//  BankApp
//
//  Created by Marcus Titton on 19/09/19.
//  Copyright (c) 2019 Marcus Titton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
    func login(request: Login.RequestUser.Request)
}

protocol LoginDataStore
{
    var user: User! {get set}
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    //Inicialização de variaveis
    var user: User!
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    
    //Para fazer a chamada da API de login
    func mockLogin(request: Login.RequestUser.Request)
    {
        //Inicializa o worker com base no LoginService (onde utilizamos o protocol para fazer a chamada na API)
        worker = LoginWorker(LoginService())
        //Chama a função de login (com os dados de acesso) e configura o response como varivel de retorno
        worker?.mockLogin(request.user, password: request.password) { (response: User?) in
            //Atribui o retorno na variavel que foi definida fora (com base no model)
            self.user = response
            
            //Chama a função de salvar o ultimo usuario logado
            self.presenter?.presentLogin()
        }
    }
  
    //Para fazer a chamada da API de login
    func login(request: Login.RequestUser.Request)
    {
        //Inicializa o worker com base no LoginService (onde utilizamos o protocol para fazer a chamada na API)
        worker = LoginWorker(LoginService())
        //Chama a função de login (com os dados de acesso) e configura o response como varivel de retorno
        worker?.login(request.user, password: request.password) { (response: User?) in
            //Atribui o retorno na variavel que foi definida fora (com base no model)
            self.user = response
            
            //Chama a função de salvar o ultimo usuario logado
            self.saveUser(request: request)
        }
    }
    
    //Função para salvar (de forma segura) o ultimo usuario logado
    private func saveUser(request: Login.RequestUser.Request) {
        
        //Inicializa as variaveis de usuario e senha
        let usuario = request.user
        let senha = request.password
        
        //Remove usuario e senha se já tiver algum
        KeychainService.removePassword(service: "MyUser", account: "BankApp")
        KeychainService.removePassword(service: "MyPass", account: "BankApp")
        
        //Acrescenta um novo usuario e senha
        KeychainService.savePassword(service: "MyUser", account: "BankApp", data: usuario)
        KeychainService.savePassword(service: "MyPass", account: "BankApp", data: senha)
        
        //Envia para o presenter (para chamar a view novamente e chamar a função com a segue com o direcionamento)
        self.presenter?.presentLogin()
    }
}
