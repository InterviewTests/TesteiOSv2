//
//  LoginViewController.swift
//  BankApp
//
//  Created by Marcus Titton on 19/09/19.
//  Copyright (c) 2019 Marcus Titton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    //Função para ir para a tela de extrato
    func showStatement()
}

class LoginViewController: UIViewController, UITextFieldDelegate, LoginDisplayLogic
{
    //Inicialização dos campos (do storyboard)
    @IBOutlet weak var txt_user: UITextField!
    @IBOutlet weak var txt_password: UITextField!
    
    //Inicialização de variaveis
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
  
    //Setup dos arquivos e variaveis de login
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    //É o preparador da segue, aqui ele chama o Router para a mudança de tela.
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    //Inicio da tela
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        //Chama a função para captura do último usuario logado
        self.getUser()
        
        //Delegate dos campos da tela
        txt_password.delegate = self
        txt_user.delegate = self
        
        //Ocultar o teclado quando toca fora do campo
        let tap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        view.addGestureRecognizer(tap)
    }
    
    //Função para capturar o ultimo usuario logado
    func getUser() {
        //Verifica se tem usuario e senha já no arquivo de keychain
        if let usuario = KeychainService.loadPassword(service: "MyUser" , account: "BankApp"), let senha = KeychainService.loadPassword(service: "MyPass", account: "BankApp"){
            
            //Atribui o usuario e senha salvos (do ultimo usuario logado) aos campos na tela
            self.txt_user.text = usuario
            self.txt_password.text = senha
        }
    }
    
    //Função para ocultar o teclado
    @objc func dismissKeyboard(){
        view.endEditing(true)
    }
    
    //Função de configuração do retorno do teclado
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        //Se a tecla de retorno for do tipo "Proximo"
        if textField.returnKeyType == .next {
            //Considera que o campo que estava vigente é o de login e passa o cursor para o campo de senha
            txt_user.resignFirstResponder()
            txt_password.becomeFirstResponder()
        //Se a tecla de retorno for do tipo "Ir"
        } else if textField.returnKeyType == .go {
            //Considera que o campo que estava vigente é o de senha e manda para a função de fazer o login
            txt_password.resignFirstResponder()
            self.doLogin()
        }
        return true
    }
    
    //Função com a segue para ir para a tela de extrato
    func showStatement() {
        performSegue(withIdentifier: "Statement", sender: nil)
    }
    
    //Função genérica para exibição de alerts na tela conforme a mensagem por parametro
    func showAlert(message: String)
    {
        let alert = UIAlertController(title: "Atenção", message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default))
        showDetailViewController(alert, sender: nil)
    }
    
    //Ação do Botão LOGIN
    @IBAction func btnLogin(_ sender: Any)
    {
        //Manda para a função de fazer login
        self.doLogin()
    }
    
    //Função que faz o login
    func doLogin()
    {
        //Inicializa as variaveis
        let login = txt_user.text!
        let password = txt_password.text!
        
        //Verifica se os campos foram digitados
        if login.isEmpty || password.isEmpty
        {
            //Camnpo de login e senha vazios, exibe mensagem para o usuario
            showAlert(message: "Os campos não podem ser vazios")
            return
        }
        
        //Verifica se o campo de login é e-mail
        if !(login.contains("@") && login.contains("."))
        {
            //Não é e-mail, verifica se é CPF
            //Retira qualquer . ou - da string
            var cpf = login.replacingOccurrences(of: ".", with: "")
            cpf = cpf.replacingOccurrences(of: "-", with: "")
            
            //Verifica se os digitos são numeros, e se contem 11 caracteres
            if !(cpf.isNumber() && cpf.count == 11)
            {
                //Não é CPF também, exibe mensagem para usuário
                showAlert(message: "E-mail ou CPF inválido, favor tentar novamente.")
                return
            }
        }
        
        //Faz a validação da senha (com base no que está configurado no Helper/Extension
        if !password.validaSenha()
        {
            //A senha não está no padrão. Exibe mensagem para o usuário
            showAlert(message: "A senha deve conter pelo menos uma letra maiuscula, um caracter especial e um caracter alfanumérico.")
            return
        }
        
        //Faz a chamada para a API
        let request = Login.RequestUser.Request(user: login, password: password)
        //Manda para o interactor (chamar o worker e fazer a requisição na API)
        interactor?.login(request: request)
    }
}
