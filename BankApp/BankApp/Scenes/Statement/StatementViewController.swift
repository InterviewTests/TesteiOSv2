//
//  StatementViewController.swift
//  BankApp
//
//  Created by Marcus Titton on 19/09/19.
//  Copyright (c) 2019 Marcus Titton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementDisplayLogic: class
{
    //Função para exibição de extrato
    func showStatement(statements: Statement.StatementApi.Response)
}

class StatementViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, StatementDisplayLogic
{
    //Inicialização de variáveis
    var interactor: StatementBusinessLogic?
    var router: (NSObjectProtocol & StatementRoutingLogic & StatementDataPassing)?
    var listStatements: [StatementUser] = []
    
    //Inicialização de campos do header da tela de extrato (com base no storyboard)
    @IBOutlet weak var txt_name: UILabel!
    @IBOutlet weak var txt_bank_agency: UILabel!
    @IBOutlet weak var txt_balance: UILabel!
    @IBOutlet weak var tableView: UITableView!
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
  
    //Setup dos arquivos e variaveis de extrato
    private func setup()
    {
        let viewController = self
        let interactor = StatementInteractor()
        let presenter = StatementPresenter()
        let router = StatementRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    //É o preparador da segue, aqui ele chama o Router para a mudança de tela.
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    //Inicio da tela
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        //Verifica se os dados da usuário foram retornados (para exibição do header)
        if let user = router?.dataStore?.user {
            //Atribui os campos do usuario nos campos do header da tela de extrato
            txt_name.text = user.name
            txt_bank_agency.text = "\(user.bankAccount) / \(user.agency)"
            txt_balance.text = user.balance.formataMoeda()
        }
        
        //Retira o traço separador das linhas da tabela
        tableView.separatorStyle = .none
        
        //Atualiza a tabela
        tableView.reloadData()
        
        //Captura o extrato
        getStatement()
    }
    
    //Função para atribuição de dados em variavel e atualização da tabela para exibição das informações
    func showStatement(statements: Statement.StatementApi.Response)
    {
        //Atribui o extrato capturado pela API na variavel listStatements (inicializada no começo do arquivo)
        listStatements = statements.statement
        
        //Atualiza a tabela
        tableView.reloadData()
    }
    
    //Manda a requisição para captura de extrato
    func getStatement()
    {
        //Cria o request com base no ID do usuario
        let request =  Statement.StatementApi.Request(userId: (router?.dataStore?.user.userId)!)
        
        //Manda para o interactor fazer o request
        interactor?.getStatement(request: request)
    }
    
    //Inicializa o número de sessão da tabela para 1
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    //Define a quantidade de linhas da tabela com base na quantidade de registros retornados
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listStatements.count
    }
    
    //Monta as linhas da tabela com base nas informações retornadas da API
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        //Inicialização de variável contendo o extrato linha a linha
        let statement = listStatements[indexPath.row]
        
        //Inicialização de nome da celula e definição da classe da celula para conseguir fazer a atribuição dos registros aos campos do storyboard
        let celulaReuso = "celulaReuso"
        let celula = tableView.dequeueReusableCell(withIdentifier: celulaReuso, for: indexPath) as! StatementCell
        
        //Atribui os registros encontrados da API aos campos do storyboard
        celula.txt_titulo.text = statement.title
        celula.txt_descricao.text = statement.desc
        celula.txt_data.text = statement.date.formataData()
        celula.txt_valor.text = statement.value.formataMoeda()
        
        //Retorna a celula criada
        return celula
    }
    
    //Ação do botão de logout
    @IBAction func actionLogout(_ sender: Any) {
        performSegue(withIdentifier: "Login", sender: nil)
    }
}
