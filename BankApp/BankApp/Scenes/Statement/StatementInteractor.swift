//
//  StatementInteractor.swift
//  BankApp
//
//  Created by Marcus Titton on 19/09/19.
//  Copyright (c) 2019 Marcus Titton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementBusinessLogic
{
    func getStatement(request: Statement.StatementApi.Request)
}

protocol StatementDataStore
{
    var user: User! { get set }
}

class StatementInteractor: StatementBusinessLogic, StatementDataStore
{
    //Inicialização de variaveis
    var user: User!
    var presenter: StatementPresentationLogic?
    var worker: StatementWorker?
    
    // Função que manda para o worker (e service, para a chamada da API/GET)
    func mockStatement(request: Statement.StatementApi.Request)
    {
        //Inicializa o worker com base no StatementService (onde utilizamos o protocol para fazer a chamada na API)
        worker = StatementWorker(StatementService())
        //Chama a função de captura de extrato (com base no id do usuario logado) e configura o response como varivel de retorno
        worker?.mockStatement(request.userId) { (response: [StatementUser]) in
            //Captura o response (e salva no StatementApi.Response)
            let response = Statement.StatementApi.Response(statement: response)
            
            self.presenter?.presentStatement(response)
        }
    }
  
    // Função que manda para o worker (e service, para a chamada da API/GET)
    func getStatement(request: Statement.StatementApi.Request)
    {
        //Inicializa o worker com base no StatementService (onde utilizamos o protocol para fazer a chamada na API)
        worker = StatementWorker(StatementService())
        //Chama a função de captura de extrato (com base no id do usuario logado) e configura o response como varivel de retorno
        worker?.getStatement(request.userId) { (response: [StatementUser]) in
            //Captura o response (e salva no StatementApi.Response)
            let response = Statement.StatementApi.Response(statement: response)
            DispatchQueue.main.async {
                //Manda para o presenter exibir em tela
                self.presenter?.presentStatement(response)
            }
        }
    }
}
