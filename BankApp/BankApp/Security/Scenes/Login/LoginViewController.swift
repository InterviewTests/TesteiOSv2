//
//  LoginViewController.swift
//  BankApp
//
//  Created by José Inácio Athayde Ferrarini on 17/03/20.
//  Copyright (c) 2020 br.com.solutis.inacioferrarini. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class {
    func authenticationComplete(viewModel: Login.Authentication.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic {

    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if let view = self.view as? LoginView {
            view.delegate = self
        }
    }

    // MARK: - Solution
    
    func authenticationComplete(viewModel: Login.Authentication.ViewModel) {

        toastEnd()
        
        if viewModel.errorMessage != nil {
            
        }
        
        if viewModel.userData != nil {
            router?.routeToStatementsList()
        }
    }
    
    // MARK: - Authentication
    
    func authenticate(username: String, password: String) {
        toast(withMessage: "Autenticando ...")
        let request = Login.Authentication.Request(login: username, password: password)
        interactor?.doLogin(request: request)
    }

}

extension LoginViewController: LoginViewDelegate {
    
    func loginView(_ loginView: LoginView, validateLogin user: String, andPassword password: String) -> Bool {
        let isCPFValid = interactor?.isCPFValid(cpf: user) ?? false
        let isEmailValid = interactor?.isEmailValid(email: user) ?? false
        let isPasswordValid = interactor?.isPasswordValid(password: password) ?? false
        
        return (isCPFValid || isEmailValid) && isPasswordValid
    }
    
    func loginView(_ loginView: LoginView, tryLoginWithUser user: String, andPassword password: String) {
        authenticate(username: user, password: password)
    }

}
