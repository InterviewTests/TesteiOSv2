//
//  LoginViewController.swift
//  Bank
//
//  Created by Matheus Rodrigues Ribeiro on 25/04/20.
//  Copyright (c) 2020 Bank. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func displaySuccessLogin(viewModel: Login.UserData.ViewModel)
    func displayError(error: Login.UserData.Error)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
    // MARK: View lifecycle

    override func viewDidLoad()
    {
        super.viewDidLoad()
        txtUser.setCPFMask()
        btnLogin.layer.cornerRadius = 5
        btnLogin.clipsToBounds = true
        self.setNeedsStatusBarAppearanceUpdate()
    }
    
    override func viewWillAppear(_ animated: Bool)
    {
        UIApplication.shared.statusBarUIView?.backgroundColor = .white
        //Get user if has any
        txtUser.text = interactor?.fetchLoggedUser()
        //clean password field
        txtPassword.text = ""
        lblError.text = ""
        reset()
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        if #available(iOS 13.0, *) {
            return .darkContent
        } else {
            // Fallback on earlier versions
            return .default
        }
    }
    
  // MARK: Do something
    @IBOutlet weak var txtUser: UITextField!
    @IBOutlet weak var txtPassword: UITextField!
    @IBOutlet weak var lblError: UILabel!
    @IBOutlet weak var btnLogin: UIButton!
    @IBOutlet weak var actLoading: UIActivityIndicatorView!
    
    @IBAction func actionLogin(_ sender: Any? = nil) {
        doLogin()
    }
    
    @IBAction func tapSelfView(_ sender: Any) {
        view.endEditing(true)
    }
    
    func processing() {
        txtUser.isEnabled = false
        txtPassword.isEnabled = false
        btnLogin.isEnabled = false
        actLoading.startAnimating()
    }
    
    func reset() {
        txtUser.isEnabled = true
        txtPassword.isEnabled = true
        btnLogin.isEnabled = true
        actLoading.stopAnimating()
    }
    
    func doLogin()
    {
        lblError.text = ""
        processing()
        let request = Login.UserData.Request(user: txtUser.text!, password: txtPassword.text!)
        interactor?.doLogin(request: request)
    }
    
    func displaySuccessLogin(viewModel: Login.UserData.ViewModel) {
        self.performSegue(withIdentifier: "Home", sender: nil)
    }

    func displayError(error: Login.UserData.Error)
    {
        lblError.text = error.message
        reset()
    }
}
