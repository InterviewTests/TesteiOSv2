//
//  HomeInteractor.swift
//  Bank
//
//  Created by Matheus Rodrigues Ribeiro on 25/04/20.
//  Copyright (c) 2020 Bank. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic
{
    func loadStatements(request: Home.StatementList.Request)
    func logout()
}

protocol HomeDataStore
{
    var userData:Home.UserData.ViewModel? { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore
{
    internal var userData: Home.UserData.ViewModel?
    
    var presenter: HomePresentationLogic?
    var worker: StatementsWorker = StatementsWorker(store: HomeService())
    var userStore: UserStoreProtocol = UserService()

    // MARK: Do something

    func logout() {
        userStore.storeUser(user: "")
    }
    
    func loadStatements(request: Home.StatementList.Request)
    {
        worker.getStatementsByUserId(userId: request.userId) { (response) in
            print("\(response)")
            if response.error.message != nil {
                self.presenter?.presentErrorToLoadStatements(error: Home.StatementList.Error(title: "Error", message: response.error.message))
                return
            }
            var model = Home.StatementList.ViewModel(statements: [])
            let transformed = response.statementList.map({ (item) -> Home.StatementList.Statement in
                return Home.StatementList.Statement(transaction: item.title, description: item.desc, date: item.date.dateBRL, value: item.value.toRealMoney())
            })
            model.statements.append(contentsOf: transformed)
            self.presenter?.presentStatements(response: model)
        }
    }
}
