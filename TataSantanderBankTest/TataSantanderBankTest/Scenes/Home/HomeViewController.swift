//
//  HomeViewController.swift
//  Bank
//
//  Created by Matheus Rodrigues Ribeiro on 25/04/20.
//  Copyright (c) 2020 Bank. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class
{
    func displayStatements(viewModel: Home.StatementList.ViewModel)
    func displayError(error: Home.StatementList.Error)
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.setNeedsStatusBarAppearanceUpdate()
        loadUserData()
        loadStatements()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        UIApplication.shared.statusBarUIView?.backgroundColor = UIColor(red: 68.0/255.0, green: 82.0/255.0, blue: 240.0/255.0, alpha: 1)
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        if #available(iOS 13.0, *) {
            return .lightContent
        } else {
            // Fallback on earlier versions
            return .default
        }
    }

    //MARK: IBOutlets
    @IBOutlet weak var lblUserName: UILabel!
    @IBOutlet weak var lblAccountNumber: UILabel!
    @IBOutlet weak var lblBalance: UILabel!
    @IBOutlet weak var tblStatment: UITableView!
    @IBOutlet weak var actLoadingStatements: UIActivityIndicatorView!
    
    var currentUser:Home.UserData.ViewModel?
    var statementList:Home.StatementList.ViewModel?
    
    @IBAction func actionLogout(_ sender: Any) {
        logout()
    }
    
    func logout() {
        interactor?.logout()
        router?.routeToBack()
    }
    
    func loadStatements()
    {
        if let userId = currentUser?.id {
            tblStatment.isHidden = true
            actLoadingStatements.startAnimating()
            let request = Home.StatementList.Request(userId: userId)
            interactor?.loadStatements(request: request)
        }
    }
    
    func loadUserData() {
        if let user = router?.dataStore?.userData {
            currentUser = user
            lblUserName.text = user.name
            lblBalance.text = user.balance.toRealMoney()
            lblAccountNumber.text = "\(user.account) / \(user.agency.applyPatternOnNumbers(pattern: "##.######-#", replacmentCharacter: "#"))"
        }else{
            router?.routeToBack()
        }
    }

    func displayStatements(viewModel: Home.StatementList.ViewModel)
    {
        print("displayStatements")
        tblStatment.isHidden = false
        actLoadingStatements.stopAnimating()
        self.statementList = viewModel
        tblStatment.reloadData()
    }
    
    func displayError(error: Home.StatementList.Error) {
        let alert = UIAlertController(title: error.title, message: error.message, preferredStyle: .alert)
        self.present(alert, animated: true, completion: nil)
    }
}

extension HomeViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return (statementList != nil) ? statementList!.statements.count : 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: "statementsItem", for: indexPath) as? StatementItemTableViewCell, let statementItem = statementList?.statements[indexPath.row] {
            cell.setupCell(statementItem)
            return cell
        }
        return UITableViewCell()
    }
}
