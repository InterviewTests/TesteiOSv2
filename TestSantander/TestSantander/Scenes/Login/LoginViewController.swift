//
//  LoginViewController.swift
//  TestSantander
//
//  Created by ely.assumpcao.ndiaye on 07/06/19.
//  Copyright (c) 2019 ely.assumpcao.ndiaye. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func displayUserAccountData(viewModel: LoginScene.Login.ViewModel)
    //FUncao para exibir a tela
    func displayStatement(viewModel: LoginScene.Statements.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    @IBOutlet weak var usernameTxt: UITextField!
    @IBOutlet weak var passwordTxt: UITextField!
    
    
    // variavel q recebe informacao da displayStatementData
    var arrayUserAccounts = [UserAccountDate]()
    // variavel q recebe informacao da displayStatementData
    var arrayStatements = [StatementList]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        loadInitialData()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func loadInitialData()
    { //Acho que posso enviar o usuario e a senha por parametro dentro desse request aqui
        //OU SE NAO NO PROPRIO MODELO ADICIONAMOS OS PARAMETROS PRA LOGIN E SENHA
        //esse request essa funcao em sim é a chamada pro INTERACTOR e as ACOES FUTUREAS DEPOIS COLOCAR ELA DENTRO DE UM ACTION AO CLIQUE DO BOTAO
        //    let request = LoginScene.Login.Request()
        //    interactor?.doLogin(request: request)
    }
    
    func displayUserAccountData(viewModel: LoginScene.Login.ViewModel)
    {
        //nameTextField.text = viewModel.name
        arrayUserAccounts = viewModel.userAccounts
        //  arrayStatements = viewModel.statements
        print("Account:")
        let mostra = arrayUserAccounts[0]
        print(mostra.name)
        
        
        //CALL STATEMENT AFTER CLIQUE BUTTON
        print("UserAccounts:")
        print(arrayUserAccounts[0].userId)
        let userAccount = arrayUserAccounts[0]
        print("UserID: \(userAccount)")
        //Chamamos a requisicao para enviar/preencher o userID
        let requestStatement = LoginScene.Statements.Request(userAccount: userAccount)
        //Chamamos o interactor responsavel pelo NEGOCIO que ira carregar o Statement
        interactor?.doLoadUserDatas(request: requestStatement)
    }
    
    func displayStatement(viewModel: LoginScene.Statements.ViewModel) {
        router?.routeToStatement()
    }
    
    
    @IBAction func loginBtnPressed(_ sender: Any) {
        guard let user = usernameTxt.text, usernameTxt.text?.characters.count != 0  else {
            EmptyTextField(text: "Preencha o campo User", message: "Preencha o campo com email ou CPF")
            return }
        
        guard let pass = passwordTxt.text, passwordTxt.text?.characters.count != 0  else {
            EmptyTextField(text: "Preencha o campo Password", message: "Preencha o campo com o padrao correto")
            return }
        
        let validation = ValidationsFields()
        if validation.isValidEmail(emailStr: user) == false {
            if user.isCPF == false {
                EmptyTextField(text: "Verificar campo Username", message: "Entrar com email ou CPF validos")
                return
            }
        }
        
        if validation.isValidPassword(passID: pass) == false {
            EmptyTextField(text: "Verificar campo password", message: "A senha deve possuir letra maiuscula, um caracter especial e um caracter alfanumérico")
        }else{
            print("Clique do Login...")
            //Enviando paramentros para preeencher o request presente em model
            let request = LoginScene.Login.Request(user: user, pass: pass)
            interactor?.doLogin(request: request)
        }
    }
    
    
    func EmptyTextField(text: String, message: String?){
        let alert = UIAlertController(title: text, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Ok", style: .cancel, handler: nil))
        self.present(alert, animated: true) }
    
}
