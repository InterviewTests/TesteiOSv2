//
//  AccountDetailsInteractor.swift
//  TesteiOSv2
//
//  Created by Macintosh on 15/11/18.
//  Copyright (c) 2018 Roney Sampaio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountDetailsBusinessLogic
{
    func fetchStatements()
}

protocol AccountDetailsDataStore
{
    var accountData: Login.AccountModel? { get set }
}

class AccountDetailsInteractor: AccountDetailsBusinessLogic, AccountDetailsDataStore, ServicesProtocol
{
    var presenter: AccountDetailsPresentationLogic?
    var worker: AccountDetailsWorker?
    var accountData: Login.AccountModel?
    
    
    // MARK: Request Statements
    
    func fetchStatements()
    {
        ServicesWorker(services: self).fetchStatements(userID: accountData?.userID ?? Int())
        
        //let response = AccountDetails.Something.Response()
        //presenter?.presentSomething(response: response)
        
    }
    
    
    func returnRequest(data: [String: Any]) {
        let statementData = AccountDetails.Response(response: data)
        if statementData.success {
            self.presenter?.presentFetchedStatementItems(statementList: statementData.statementList ?? [Dictionary<String, Any>]())
            self.presenter?.presentFetchedAccountDetails(accountData: accountData!)
        } else {
            returnError(errorMsg: statementData.errorMsg ?? "defaultConnectionError".localized)
        }
    }
    
    func returnError(errorMsg: String) {
        presenter?.showAlert(alertBodyMessage: errorMsg)
    }
}
