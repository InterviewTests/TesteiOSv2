//
//  AccountDetailsViewController.swift
//  TesteiOSv2
//
//  Created by Macintosh on 15/11/18.
//  Copyright (c) 2018 Roney Sampaio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountDetailsDisplayLogic: class
{
    func displayFetchedAccountData(statementItems: [AccountDetails.StatementItem])
    func displayFetchedUserDetails(name: String, accountInfo: String, balance: String)
}

class AccountDetailsViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, AccountDetailsDisplayLogic
{
    var interactor: AccountDetailsBusinessLogic?
    var router: (NSObjectProtocol & AccountDetailsRoutingLogic & AccountDetailsDataPassing)?
    
    
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = AccountDetailsInteractor()
        let presenter = AccountDetailsPresenter()
        let router = AccountDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: View lifecycle
    var items: [AccountDetails.StatementItem] = []
    let cellIdentifier = "statement_item"
    
    
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        statementsTableView.delegate = self
        getAccountData()
    }
    
    
    
    //MARK: Status bar
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.setNeedsStatusBarAppearanceUpdate()
    }
    
    
    
    override var preferredStatusBarStyle : UIStatusBarStyle {
        return .lightContent
    }
    
    
    @IBOutlet weak var headerUserName: UILabel!
    @IBOutlet weak var headerAccountInfo: UILabel!
    @IBOutlet weak var headerAccountBalance: UILabel!
    
    @IBOutlet weak var statementsTableView: UITableView!
    
    
    // MARK: Get Statement
    func getAccountData()
    {
        interactor?.fetchStatements()
    }
    
    
    //MARK: Header Data
    func displayFetchedUserDetails(name: String, accountInfo: String, balance: String) {
        headerUserName.text = name
        headerAccountInfo.text = accountInfo
        headerAccountBalance.text = balance
    }
    
    
    // MARK: Table Data
    func displayFetchedAccountData(statementItems: [AccountDetails.StatementItem])
    {
        items = statementItems
        statementsTableView.reloadData()
    }
    
    
    //MARK: Table View
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.items.count
    }
    
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as? StatementItemTableViewCell  else {
            fatalError("The dequeued cell is not an instance of StatementItemTableViewCell.")
        }
        
        let displayedItem = self.items[indexPath.row]
        
        cell.itemTitle?.text = displayedItem.title
        cell.itemDescription?.text = displayedItem.description
        cell.itemDate?.text = displayedItem.date
        cell.ItemAmmount?.text = displayedItem.value
        
        return cell
    }
}
