//
//  LoginInteractor.swift
//  TesteiOSv2
//
//  Created by Macintosh on 15/11/18.
//  Copyright (c) 2018 Roney Sampaio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
    func login(request: Login.Request)
    func checkForSavedLogin() -> String
}


protocol LoginDataStore
{
    var loginData: Login.AccountModel? { get set }
}


class LoginInteractor: LoginBusinessLogic, LoginDataStore, ServicesProtocol
{
    
    var loginData: Login.AccountModel?
    var presenter: LoginPresentationLogic?
    var userID: String?
    let worker: LoginWorker = LoginWorker()
    
    
    
    // MARK: User saved login
    func checkForSavedLogin() -> String {
        return worker.getUserID() ?? String()
    }
    
    
    // MARK: Login Request
    func login(request: Login.Request)
    {
        self.userID = request.userID ?? String()
        let password = request.password ?? String()
        
        if !self.userID!.isValidCPF && !self.userID!.isValidEmail {
            presenter?.showAlert(alertBodyMessage: "invalidUser".localized)
        } else if !password.isValidPassword {
            presenter?.showAlert(alertBodyMessage: "invalidPassword".localized)
        } else {
            ServicesWorker(services: self).callLogin(userID: self.userID ?? String(), password: password)
        }
    }
    
    
    // MARK: Request Response
    func returnRequest(data: [String: Any]) {
        
        let responsePostLogin = Login.Response(response: data)
        
        if responsePostLogin.success {
            self.loginData = Login.AccountModel(userAccountData: responsePostLogin.userAccount)
            presenter?.presentLogin(accountModel: self.loginData!)
            worker.saveUserID(self.userID)
        } else {
            returnError(errorMsg: responsePostLogin.errorMsg ?? "defaultConnectionError".localized)
        }
    }
    
    
    func returnError(errorMsg: String) {
        presenter?.showAlert(alertBodyMessage: errorMsg)
    }
}
