//
//  LoginViewController.swift
//  Bank
//
//  Created by Junior Obici on 13/01/20.
//  Copyright (c) 2020 Junior Obici. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class {
    func displayLoginData(viewModel: LoginScene.Login.ViewModel)
    func displayTransaction(viewModel: LoginScene.Transaction.ViewModel)
}

class LoginViewController: UIViewController, UITextFieldDelegate, LoginDisplayLogic {

    //MARK: - Variaveis
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    var arrayLogin = [User]()
    var arrayTransaction = [Transaction]()
    
    //MARK: - Componentes
    @IBOutlet weak var textUser: UITextField!
    @IBOutlet weak var textPassword: UITextField!
    
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        textUser.delegate = self
        textPassword.delegate = self
        
        UserDefaults.standard.removeObject(forKey: "user")
        UserDefaults.standard.removeObject(forKey: "pass")
        verifyLoggedUser()
    }
    
    // MARK: - Teclado
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
    
    //MARK: DisplayData
    func displayLoginData(viewModel: LoginScene.Login.ViewModel) {
        arrayLogin = viewModel.login
        
        let userAccount = arrayLogin[0]
        let requestTransaction = LoginScene.Transaction.Request(login: userAccount)
        interactor?.doLoadLogin(request: requestTransaction)
    }
    
    func displayTransaction(viewModel: LoginScene.Transaction.ViewModel) {
        router?.routeToTransaction()
    }
    
    // MARK: - Functions
    func showAlert(message: String) {
        let alert = UIAlertController(title: "Atenção", message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default))
        showDetailViewController(alert, sender: nil)
    }
    
    func verifyLoggedUser() {
        guard let user = UserDefaults.standard.string(forKey: "user"), let pass = UserDefaults.standard.string(forKey: "pass") else { return }

        if (!user.isEmpty && !pass.isEmpty) {
            self.doLogin(user: user, pass: pass)
        }
    }
    
    func saveUserLogged(user: String, pass: String) {
        UserDefaults.standard.set(user, forKey: "user")
        UserDefaults.standard.set(pass, forKey: "pass")
    }
    

    func doLogin(user: String, pass: String) {
        if (user.isEmpty || pass.isEmpty) {
            showAlert(message: "Preencha todos os campos")
            return
        }
        
        let cpf = user.replacingOccurrences(of: ".", with: "").replacingOccurrences(of: "-", with: "")
        if (cpf.isNumber() && cpf.count == 11) {
            if (!Function.validateCPF(cpf: cpf)) {
                showAlert(message: "CPF inválido")
                return
            }
        } else {
            if (!Function.validateEmail(email: user)) {
                showAlert(message: "E-mail inválido")
                return
            }
        }
        
        if (!Function.validatePassword(password: pass)) {
            showAlert(message: "A senha deve conter pelo menos uma letra maiuscula, um caracter especial e um caracter alfanumérico.")
            return
        }
        
        self.saveUserLogged(user: user, pass: pass)
        let request = LoginScene.Login.Request(user: user, pass: pass)
        interactor?.doLogin(request: request)
    }
    
    @IBAction func buttonLogin(_ sender: Any) {
        guard let user = textUser.text, let pass = textPassword.text else { return }
        self.doLogin(user: user, pass: pass)
    }
}
