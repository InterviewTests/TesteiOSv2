//
//  TransactionViewController.swift
//  Bank
//
//  Created by Junior Obici on 13/01/20.
//  Copyright (c) 2020 Junior Obici. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TransactionDisplayLogic: class {
    func displayInitialData(viewModel: TransactionScene.Load.ViewModel)
}

class TransactionViewController: UIViewController, TransactionDisplayLogic {
    
    // MARK: - Variables
    var interactor: TransactionBusinessLogic?
    var router: (NSObjectProtocol & TransactionRoutingLogic & TransactionDataPassing)?
    var arrayTransactions = [Transaction]()
    
    // MARK: - Components
    @IBOutlet weak var labelName: UILabel!
    @IBOutlet weak var labelAccount: UILabel!
    @IBOutlet weak var labelBalance: UILabel!
    @IBOutlet weak var tableExpenses: UITableView!

    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = TransactionInteractor()
        let presenter = TransactionPresenter()
        let router = TransactionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    func loadInitialData() {
        let request = TransactionScene.Load.Request()
        interactor?.doLoadInitialData(request: request)
    }
    
    func displayInitialData(viewModel: TransactionScene.Load.ViewModel) {
        arrayTransactions = viewModel.transactions
        
        labelName.text = router?.dataStore?.name
        labelAccount.text = "\(router!.dataStore!.account) / \(router!.dataStore!.agency.toAgency())"
        labelBalance.text = Decimal(router!.dataStore!.balance).Currency
        
        DispatchQueue.main.async {
            self.tableExpenses.reloadData()
        }
    }
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        //self.tableExpenses.dataSource = self
        //self.tableExpenses.delegate = self
        loadInitialData()
    }
    
    
    // MARK: - Button Action
    @IBAction func buttonLogout(_ sender: Any) {
        showAlertToLogout()
    }
    
    // MARK: - Function
    fileprivate func showAlertToLogout() {
        let alert = UIAlertController(title: "Bank", message: "Deseja realmente sair?", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Sim", style: .default, handler: { action in
            DispatchQueue.main.async {
                UserDefaults.standard.removeObject(forKey: "user")
                UserDefaults.standard.removeObject(forKey: "pass")
                self.dismiss(animated: true, completion: nil)
            }
        }))
        alert.addAction(UIAlertAction(title: "NÃ£o", style: .cancel, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
}

// MARK: - Extension
extension TransactionViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return arrayTransactions.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as? TransactionTableViewCell {
            let transaction = arrayTransactions[indexPath.row]
            cell.prepareTransactionCell(with: transaction)
            return cell
        } else {
            return UITableViewCell()
        }
    }
}
