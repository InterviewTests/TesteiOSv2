//
//  LocationWorker.swift
//  Bank
//
//  Created by Thiago Lima on 19/01/19.
//  Copyright (c) 2019 SantanderTecnologia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

typealias loginResponseHandler = (_ response:Location.Login.Response) ->()

class LocationWorker {
    
    func login(user:String!, password:String!, responseRequest:@escaping(loginResponseHandler)) {
        if verificaInternet() {
            Alamofire.request(Endpoints.Bank.Login.url,
                              method: .post,
                              parameters: ["user":user, "password":password],
                              encoding: URLEncoding.default)
                .responseJSON { dataResponse in
                    switch dataResponse.result {
                        case .success(let json):
                            let response = json as! NSDictionary
                            let error = response.object(forKey: "error") as? NSDictionary
                            let userAccount = response.object(forKey: "userAccount") as? NSDictionary
                            
                            if userAccount?.count ?? 0 > 0 {
                                responseRequest(Location.Login.Response(userAccount: Location.UserAccount(userId: userAccount?.object(forKey: "userId") as! Int,
                                                                                                          name: userAccount?.object(forKey: "name") as! String,
                                                                                                          bankAccount: userAccount?.object(forKey: "bankAccount") as! String,
                                                                                                          agency: userAccount?.object(forKey: "agency") as! String,
                                                                                                          balance: userAccount?.object(forKey: "balance") as! Double),
                                                                        error: nil))
                            }else if error?.count ?? 0 > 0 {
                                responseRequest(Location.Login.Response(userAccount: nil,
                                                                        error:Location.Error(code: error?.object(forKey: "code") as! Int,
                                                                                             message: error?.object(forKey: "message") as! String)))
                            } else {
                                responseRequest(Location.Login.Response(userAccount: nil,
                                                                        error:Location.Error(code: 0, message: "Ops! Ocorreu um erro ao contatar o servidor. Tente mais tarde.")))
                            }
                            break
                        case .failure( _):
                            responseRequest(Location.Login.Response(userAccount: nil,
                                                                    error:Location.Error(code: 0, message: "Ops! Ocorreu um erro ao contatar o servidor. Tente mais tarde.")))
                            break
                    }
            }
        } else {
            responseRequest(Location.Login.Response(userAccount: nil,
                                                    error:Location.Error(code: 0, message: "Sem conex√£o com a internet.")))
        }
    }
    
}
