//
//  CurrencyViewController.swift
//  Bank
//
//  Created by Thiago Lima on 19/01/19.
//  Copyright (c) 2019 SantanderTecnologia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrencyDisplayLogic: class {
    func displayStatements(_ viewModel: Currency.Response)
}

class CurrencyViewController: UIViewController, CurrencyDisplayLogic {
    var interactor: CurrencyBusinessLogic?
    var router: (NSObjectProtocol & CurrencyRoutingLogic & CurrencyDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CurrencyInteractor()
        let presenter = CurrencyPresenter()
        let router = CurrencyRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.showHUD(progressLabel: "Carregando")
        self.mostrarUsuario()
        self.fetchStatements()
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle{
        return .lightContent
    }
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet var lb_nome: UILabel!
    @IBOutlet var lb_conta: UILabel!
    @IBOutlet var lb_saldo: UILabel!
    var list_statements: NSMutableArray = NSMutableArray()
    
    func mostrarUsuario() {
        let user = self.interactor!.getUserAccount()
        self.lb_nome.text = user?.name
        self.lb_conta.text = "\(user?.bankAccount ?? "") / \(user?.agency.maskAgency() ?? "")"
        self.lb_saldo.text = String(format: "R$ %.02f", locale: Locale.current, arguments: [user!.balance])
    }
    
    func fetchStatements() {
        let request = Currency.Request()
        interactor?.fetchStatements(request: request)
    }
    
    func displayStatements(_ viewModel: Currency.Response) {
        self.dismissHUD(isAnimated: true)
        if let statements = viewModel.statements {
            self.list_statements = statements as! NSMutableArray
            self.tableView.reloadData()
        }
    }
    
    @IBAction func LogoutAction(_ sender: UIButton) {
        self.navigationController?.popViewController(animated: true)
    }
    
}

extension CurrencyViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return list_statements.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath) as! CurrencyTableViewCell
        let statement = list_statements.object(at: indexPath.row) as! Currency.Statement
        cell.prepararCell(statement)
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 50
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = tableView.dequeueReusableCell(withIdentifier: "CellHeader") as! CurrencySectionHeaderFooterViewCell
        view.setTitle("Recentes");
        return view
    }
}
